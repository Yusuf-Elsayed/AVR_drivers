
Keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000057e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  0000057e  000005f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000618  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000648  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000684  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010aa  00000000  00000000  00000714  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000074d  00000000  00000000  000017be  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a0d  00000000  00000000  00001f0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000108  00000000  00000000  00002918  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f0  00000000  00000000  00002a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a22  00000000  00000000  00002e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00003832  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e7       	ldi	r30, 0x7E	; 126
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 38       	cpi	r26, 0x86	; 134
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 b7 01 	call	0x36e	; 0x36e <main>
  7a:	0c 94 bd 02 	jmp	0x57a	; 0x57a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <kEYBAD_vInit>:



void kEYBAD_vInit(void){
	/* SET 4 inputs */
	CLR_BIT(KEYPAD_INPUT_DDR, IN0);
  82:	84 b3       	in	r24, 0x14	; 20
  84:	8e 7f       	andi	r24, 0xFE	; 254
  86:	84 bb       	out	0x14, r24	; 20
	CLR_BIT(KEYPAD_INPUT_DDR, IN1);
  88:	84 b3       	in	r24, 0x14	; 20
  8a:	8d 7f       	andi	r24, 0xFD	; 253
  8c:	84 bb       	out	0x14, r24	; 20
	CLR_BIT(KEYPAD_INPUT_DDR, IN2);
  8e:	84 b3       	in	r24, 0x14	; 20
  90:	8b 7f       	andi	r24, 0xFB	; 251
  92:	84 bb       	out	0x14, r24	; 20
	CLR_BIT(KEYPAD_INPUT_DDR, IN3);
  94:	84 b3       	in	r24, 0x14	; 20
  96:	87 7f       	andi	r24, 0xF7	; 247
  98:	84 bb       	out	0x14, r24	; 20
	/* Pull up 4 input pins --> defualt to read is 1*/
	SET_BIT(KEYPAD_INPUT_PORT, IN0);
  9a:	85 b3       	in	r24, 0x15	; 21
  9c:	81 60       	ori	r24, 0x01	; 1
  9e:	85 bb       	out	0x15, r24	; 21
	SET_BIT(KEYPAD_INPUT_PORT, IN1);
  a0:	85 b3       	in	r24, 0x15	; 21
  a2:	82 60       	ori	r24, 0x02	; 2
  a4:	85 bb       	out	0x15, r24	; 21
	SET_BIT(KEYPAD_INPUT_PORT, IN2);
  a6:	85 b3       	in	r24, 0x15	; 21
  a8:	84 60       	ori	r24, 0x04	; 4
  aa:	85 bb       	out	0x15, r24	; 21
	SET_BIT(KEYPAD_INPUT_PORT, IN3);
  ac:	85 b3       	in	r24, 0x15	; 21
  ae:	88 60       	ori	r24, 0x08	; 8
  b0:	85 bb       	out	0x15, r24	; 21
	/* SET 4 outputs */
	SET_BIT(KEYPAD_OUTPUT_DDR, OUT0);
  b2:	84 b3       	in	r24, 0x14	; 20
  b4:	80 61       	ori	r24, 0x10	; 16
  b6:	84 bb       	out	0x14, r24	; 20
	SET_BIT(KEYPAD_OUTPUT_DDR, OUT1);
  b8:	84 b3       	in	r24, 0x14	; 20
  ba:	80 62       	ori	r24, 0x20	; 32
  bc:	84 bb       	out	0x14, r24	; 20
	SET_BIT(KEYPAD_OUTPUT_DDR, OUT2);
  be:	84 b3       	in	r24, 0x14	; 20
  c0:	80 64       	ori	r24, 0x40	; 64
  c2:	84 bb       	out	0x14, r24	; 20
	SET_BIT(KEYPAD_OUTPUT_DDR, OUT3);
  c4:	84 b3       	in	r24, 0x14	; 20
  c6:	80 68       	ori	r24, 0x80	; 128
  c8:	84 bb       	out	0x14, r24	; 20
	/* SET 4 outputs ports to high*/
	SET_BIT(KEYPAD_OUTPUT_PORT, OUT0);
  ca:	85 b3       	in	r24, 0x15	; 21
  cc:	80 61       	ori	r24, 0x10	; 16
  ce:	85 bb       	out	0x15, r24	; 21
	SET_BIT(KEYPAD_OUTPUT_PORT, OUT1);
  d0:	85 b3       	in	r24, 0x15	; 21
  d2:	80 62       	ori	r24, 0x20	; 32
  d4:	85 bb       	out	0x15, r24	; 21
	SET_BIT(KEYPAD_OUTPUT_PORT, OUT2);
  d6:	85 b3       	in	r24, 0x15	; 21
  d8:	80 64       	ori	r24, 0x40	; 64
  da:	85 bb       	out	0x15, r24	; 21
	SET_BIT(KEYPAD_OUTPUT_PORT, OUT3);
  dc:	85 b3       	in	r24, 0x15	; 21
  de:	80 68       	ori	r24, 0x80	; 128
  e0:	85 bb       	out	0x15, r24	; 21
  e2:	08 95       	ret

000000e4 <kEYBAD_u8Getkey>:
}

u8 kEYBAD_u8Getkey(){
	u8 key = 'x';								// return x case of no press
	CLR_BIT(KEYPAD_OUTPUT_PORT, OUT0);			// output 0 column 0
  e4:	85 b3       	in	r24, 0x15	; 21
  e6:	8f 7e       	andi	r24, 0xEF	; 239
  e8:	85 bb       	out	0x15, r24	; 21
	if(!GET_BIT(KEYPAD_INPUT_PIN, IN0)){		// "!" see which input be 0
  ea:	98 99       	sbic	0x13, 0	; 19
  ec:	04 c0       	rjmp	.+8      	; 0xf6 <kEYBAD_u8Getkey+0x12>
		key = '1';
		while(!GET_BIT(KEYPAD_INPUT_PIN, IN0));
  ee:	98 9b       	sbis	0x13, 0	; 19
  f0:	fe cf       	rjmp	.-4      	; 0xee <kEYBAD_u8Getkey+0xa>

u8 kEYBAD_u8Getkey(){
	u8 key = 'x';								// return x case of no press
	CLR_BIT(KEYPAD_OUTPUT_PORT, OUT0);			// output 0 column 0
	if(!GET_BIT(KEYPAD_INPUT_PIN, IN0)){		// "!" see which input be 0
		key = '1';
  f2:	81 e3       	ldi	r24, 0x31	; 49
  f4:	13 c0       	rjmp	.+38     	; 0x11c <kEYBAD_u8Getkey+0x38>
		while(!GET_BIT(KEYPAD_INPUT_PIN, IN0));
		}else if(!GET_BIT(KEYPAD_INPUT_PIN, IN1)){	// "!" see which input be 0
  f6:	99 99       	sbic	0x13, 1	; 19
  f8:	04 c0       	rjmp	.+8      	; 0x102 <kEYBAD_u8Getkey+0x1e>
		key = '4';
		while(!GET_BIT(KEYPAD_INPUT_PIN, IN1));
  fa:	99 9b       	sbis	0x13, 1	; 19
  fc:	fe cf       	rjmp	.-4      	; 0xfa <kEYBAD_u8Getkey+0x16>
	CLR_BIT(KEYPAD_OUTPUT_PORT, OUT0);			// output 0 column 0
	if(!GET_BIT(KEYPAD_INPUT_PIN, IN0)){		// "!" see which input be 0
		key = '1';
		while(!GET_BIT(KEYPAD_INPUT_PIN, IN0));
		}else if(!GET_BIT(KEYPAD_INPUT_PIN, IN1)){	// "!" see which input be 0
		key = '4';
  fe:	84 e3       	ldi	r24, 0x34	; 52
 100:	0d c0       	rjmp	.+26     	; 0x11c <kEYBAD_u8Getkey+0x38>
		while(!GET_BIT(KEYPAD_INPUT_PIN, IN1));
		}else if(!GET_BIT(KEYPAD_INPUT_PIN, IN2)){	// "!" see which input be 0
 102:	9a 99       	sbic	0x13, 2	; 19
 104:	04 c0       	rjmp	.+8      	; 0x10e <kEYBAD_u8Getkey+0x2a>
		key = '7';
		while(!GET_BIT(KEYPAD_INPUT_PIN, IN2));
 106:	9a 9b       	sbis	0x13, 2	; 19
 108:	fe cf       	rjmp	.-4      	; 0x106 <kEYBAD_u8Getkey+0x22>
		while(!GET_BIT(KEYPAD_INPUT_PIN, IN0));
		}else if(!GET_BIT(KEYPAD_INPUT_PIN, IN1)){	// "!" see which input be 0
		key = '4';
		while(!GET_BIT(KEYPAD_INPUT_PIN, IN1));
		}else if(!GET_BIT(KEYPAD_INPUT_PIN, IN2)){	// "!" see which input be 0
		key = '7';
 10a:	87 e3       	ldi	r24, 0x37	; 55
 10c:	07 c0       	rjmp	.+14     	; 0x11c <kEYBAD_u8Getkey+0x38>
		while(!GET_BIT(KEYPAD_INPUT_PIN, IN2));
		}else if(!GET_BIT(KEYPAD_INPUT_PIN, IN3)){	// "!" see which input be 0
 10e:	9b 99       	sbic	0x13, 3	; 19
 110:	04 c0       	rjmp	.+8      	; 0x11a <kEYBAD_u8Getkey+0x36>
		key = '*';
		while(!GET_BIT(KEYPAD_INPUT_PIN, IN3));
 112:	9b 9b       	sbis	0x13, 3	; 19
 114:	fe cf       	rjmp	.-4      	; 0x112 <kEYBAD_u8Getkey+0x2e>
		while(!GET_BIT(KEYPAD_INPUT_PIN, IN1));
		}else if(!GET_BIT(KEYPAD_INPUT_PIN, IN2)){	// "!" see which input be 0
		key = '7';
		while(!GET_BIT(KEYPAD_INPUT_PIN, IN2));
		}else if(!GET_BIT(KEYPAD_INPUT_PIN, IN3)){	// "!" see which input be 0
		key = '*';
 116:	8a e2       	ldi	r24, 0x2A	; 42
 118:	01 c0       	rjmp	.+2      	; 0x11c <kEYBAD_u8Getkey+0x38>
	SET_BIT(KEYPAD_OUTPUT_PORT, OUT2);
	SET_BIT(KEYPAD_OUTPUT_PORT, OUT3);
}

u8 kEYBAD_u8Getkey(){
	u8 key = 'x';								// return x case of no press
 11a:	88 e7       	ldi	r24, 0x78	; 120
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11c:	e9 ef       	ldi	r30, 0xF9	; 249
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	31 97       	sbiw	r30, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <kEYBAD_u8Getkey+0x3c>
 124:	00 c0       	rjmp	.+0      	; 0x126 <kEYBAD_u8Getkey+0x42>
 126:	00 00       	nop
		}else if(!GET_BIT(KEYPAD_INPUT_PIN, IN3)){	// "!" see which input be 0
		key = '*';
		while(!GET_BIT(KEYPAD_INPUT_PIN, IN3));
	}
	_delay_ms(1);								// delay between set and clear
	SET_BIT(KEYPAD_OUTPUT_PORT, OUT0);			// not in column 0
 128:	95 b3       	in	r25, 0x15	; 21
 12a:	90 61       	ori	r25, 0x10	; 16
 12c:	95 bb       	out	0x15, r25	; 21
	
	CLR_BIT(KEYPAD_OUTPUT_PORT, OUT1);			// output 0 column 1
 12e:	95 b3       	in	r25, 0x15	; 21
 130:	9f 7d       	andi	r25, 0xDF	; 223
 132:	95 bb       	out	0x15, r25	; 21
	if(!GET_BIT(KEYPAD_INPUT_PIN, IN0)){		// "!" see which input be 0
 134:	98 99       	sbic	0x13, 0	; 19
 136:	04 c0       	rjmp	.+8      	; 0x140 <kEYBAD_u8Getkey+0x5c>
		key = '2';
		while(!GET_BIT(KEYPAD_INPUT_PIN, IN0));
 138:	98 9b       	sbis	0x13, 0	; 19
 13a:	fe cf       	rjmp	.-4      	; 0x138 <kEYBAD_u8Getkey+0x54>
	_delay_ms(1);								// delay between set and clear
	SET_BIT(KEYPAD_OUTPUT_PORT, OUT0);			// not in column 0
	
	CLR_BIT(KEYPAD_OUTPUT_PORT, OUT1);			// output 0 column 1
	if(!GET_BIT(KEYPAD_INPUT_PIN, IN0)){		// "!" see which input be 0
		key = '2';
 13c:	82 e3       	ldi	r24, 0x32	; 50
 13e:	11 c0       	rjmp	.+34     	; 0x162 <kEYBAD_u8Getkey+0x7e>
		while(!GET_BIT(KEYPAD_INPUT_PIN, IN0));
		}else if(!GET_BIT(KEYPAD_INPUT_PIN, IN1)){	// "!" see which input be 0
 140:	99 99       	sbic	0x13, 1	; 19
 142:	04 c0       	rjmp	.+8      	; 0x14c <kEYBAD_u8Getkey+0x68>
		key = '5';
		while(!GET_BIT(KEYPAD_INPUT_PIN, IN1));
 144:	99 9b       	sbis	0x13, 1	; 19
 146:	fe cf       	rjmp	.-4      	; 0x144 <kEYBAD_u8Getkey+0x60>
	CLR_BIT(KEYPAD_OUTPUT_PORT, OUT1);			// output 0 column 1
	if(!GET_BIT(KEYPAD_INPUT_PIN, IN0)){		// "!" see which input be 0
		key = '2';
		while(!GET_BIT(KEYPAD_INPUT_PIN, IN0));
		}else if(!GET_BIT(KEYPAD_INPUT_PIN, IN1)){	// "!" see which input be 0
		key = '5';
 148:	85 e3       	ldi	r24, 0x35	; 53
 14a:	0b c0       	rjmp	.+22     	; 0x162 <kEYBAD_u8Getkey+0x7e>
		while(!GET_BIT(KEYPAD_INPUT_PIN, IN1));
		}else if(!GET_BIT(KEYPAD_INPUT_PIN, IN2)){	// "!" see which input be 0
 14c:	9a 99       	sbic	0x13, 2	; 19
 14e:	04 c0       	rjmp	.+8      	; 0x158 <kEYBAD_u8Getkey+0x74>
		key = '8';
		while(!GET_BIT(KEYPAD_INPUT_PIN, IN2));
 150:	9a 9b       	sbis	0x13, 2	; 19
 152:	fe cf       	rjmp	.-4      	; 0x150 <kEYBAD_u8Getkey+0x6c>
		while(!GET_BIT(KEYPAD_INPUT_PIN, IN0));
		}else if(!GET_BIT(KEYPAD_INPUT_PIN, IN1)){	// "!" see which input be 0
		key = '5';
		while(!GET_BIT(KEYPAD_INPUT_PIN, IN1));
		}else if(!GET_BIT(KEYPAD_INPUT_PIN, IN2)){	// "!" see which input be 0
		key = '8';
 154:	88 e3       	ldi	r24, 0x38	; 56
 156:	05 c0       	rjmp	.+10     	; 0x162 <kEYBAD_u8Getkey+0x7e>
		while(!GET_BIT(KEYPAD_INPUT_PIN, IN2));
		}else if(!GET_BIT(KEYPAD_INPUT_PIN, IN3)){	// "!" see which input be 0
 158:	9b 99       	sbic	0x13, 3	; 19
 15a:	03 c0       	rjmp	.+6      	; 0x162 <kEYBAD_u8Getkey+0x7e>
		key = '0';
		while(!GET_BIT(KEYPAD_INPUT_PIN, IN3));
 15c:	9b 9b       	sbis	0x13, 3	; 19
 15e:	fe cf       	rjmp	.-4      	; 0x15c <kEYBAD_u8Getkey+0x78>
		while(!GET_BIT(KEYPAD_INPUT_PIN, IN1));
		}else if(!GET_BIT(KEYPAD_INPUT_PIN, IN2)){	// "!" see which input be 0
		key = '8';
		while(!GET_BIT(KEYPAD_INPUT_PIN, IN2));
		}else if(!GET_BIT(KEYPAD_INPUT_PIN, IN3)){	// "!" see which input be 0
		key = '0';
 160:	80 e3       	ldi	r24, 0x30	; 48
 162:	e9 ef       	ldi	r30, 0xF9	; 249
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	31 97       	sbiw	r30, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <kEYBAD_u8Getkey+0x82>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <kEYBAD_u8Getkey+0x88>
 16c:	00 00       	nop
		while(!GET_BIT(KEYPAD_INPUT_PIN, IN3));
	}
	_delay_ms(1);								// delay between set and clear
	SET_BIT(KEYPAD_OUTPUT_PORT, OUT1);			// not in column 1
 16e:	95 b3       	in	r25, 0x15	; 21
 170:	90 62       	ori	r25, 0x20	; 32
 172:	95 bb       	out	0x15, r25	; 21
	
	CLR_BIT(KEYPAD_OUTPUT_PORT, OUT2);			// output 0 column 2
 174:	95 b3       	in	r25, 0x15	; 21
 176:	9f 7b       	andi	r25, 0xBF	; 191
 178:	95 bb       	out	0x15, r25	; 21
	if(!GET_BIT(KEYPAD_INPUT_PIN, IN0)){		// "!" see which input be 0
 17a:	98 99       	sbic	0x13, 0	; 19
 17c:	04 c0       	rjmp	.+8      	; 0x186 <kEYBAD_u8Getkey+0xa2>
		key = '3';
		while(!GET_BIT(KEYPAD_INPUT_PIN, IN0));
 17e:	98 9b       	sbis	0x13, 0	; 19
 180:	fe cf       	rjmp	.-4      	; 0x17e <kEYBAD_u8Getkey+0x9a>
	_delay_ms(1);								// delay between set and clear
	SET_BIT(KEYPAD_OUTPUT_PORT, OUT1);			// not in column 1
	
	CLR_BIT(KEYPAD_OUTPUT_PORT, OUT2);			// output 0 column 2
	if(!GET_BIT(KEYPAD_INPUT_PIN, IN0)){		// "!" see which input be 0
		key = '3';
 182:	83 e3       	ldi	r24, 0x33	; 51
 184:	11 c0       	rjmp	.+34     	; 0x1a8 <kEYBAD_u8Getkey+0xc4>
		while(!GET_BIT(KEYPAD_INPUT_PIN, IN0));
		}else if(!GET_BIT(KEYPAD_INPUT_PIN, IN1)){	// "!" see which input be 0
 186:	99 99       	sbic	0x13, 1	; 19
 188:	04 c0       	rjmp	.+8      	; 0x192 <kEYBAD_u8Getkey+0xae>
		key = '6';
		while(!GET_BIT(KEYPAD_INPUT_PIN, IN1));
 18a:	99 9b       	sbis	0x13, 1	; 19
 18c:	fe cf       	rjmp	.-4      	; 0x18a <kEYBAD_u8Getkey+0xa6>
	CLR_BIT(KEYPAD_OUTPUT_PORT, OUT2);			// output 0 column 2
	if(!GET_BIT(KEYPAD_INPUT_PIN, IN0)){		// "!" see which input be 0
		key = '3';
		while(!GET_BIT(KEYPAD_INPUT_PIN, IN0));
		}else if(!GET_BIT(KEYPAD_INPUT_PIN, IN1)){	// "!" see which input be 0
		key = '6';
 18e:	86 e3       	ldi	r24, 0x36	; 54
 190:	0b c0       	rjmp	.+22     	; 0x1a8 <kEYBAD_u8Getkey+0xc4>
		while(!GET_BIT(KEYPAD_INPUT_PIN, IN1));
		}else if(!GET_BIT(KEYPAD_INPUT_PIN, IN2)){	// "!" see which input be 0
 192:	9a 99       	sbic	0x13, 2	; 19
 194:	04 c0       	rjmp	.+8      	; 0x19e <kEYBAD_u8Getkey+0xba>
		key = '9';
		while(!GET_BIT(KEYPAD_INPUT_PIN, IN2));
 196:	9a 9b       	sbis	0x13, 2	; 19
 198:	fe cf       	rjmp	.-4      	; 0x196 <kEYBAD_u8Getkey+0xb2>
		while(!GET_BIT(KEYPAD_INPUT_PIN, IN0));
		}else if(!GET_BIT(KEYPAD_INPUT_PIN, IN1)){	// "!" see which input be 0
		key = '6';
		while(!GET_BIT(KEYPAD_INPUT_PIN, IN1));
		}else if(!GET_BIT(KEYPAD_INPUT_PIN, IN2)){	// "!" see which input be 0
		key = '9';
 19a:	89 e3       	ldi	r24, 0x39	; 57
 19c:	05 c0       	rjmp	.+10     	; 0x1a8 <kEYBAD_u8Getkey+0xc4>
		while(!GET_BIT(KEYPAD_INPUT_PIN, IN2));
		}else if(!GET_BIT(KEYPAD_INPUT_PIN, IN3)){	// "!" see which input be 0
 19e:	9b 99       	sbic	0x13, 3	; 19
 1a0:	03 c0       	rjmp	.+6      	; 0x1a8 <kEYBAD_u8Getkey+0xc4>
		key = '#';
		while(!GET_BIT(KEYPAD_INPUT_PIN, IN3));
 1a2:	9b 9b       	sbis	0x13, 3	; 19
 1a4:	fe cf       	rjmp	.-4      	; 0x1a2 <kEYBAD_u8Getkey+0xbe>
		while(!GET_BIT(KEYPAD_INPUT_PIN, IN1));
		}else if(!GET_BIT(KEYPAD_INPUT_PIN, IN2)){	// "!" see which input be 0
		key = '9';
		while(!GET_BIT(KEYPAD_INPUT_PIN, IN2));
		}else if(!GET_BIT(KEYPAD_INPUT_PIN, IN3)){	// "!" see which input be 0
		key = '#';
 1a6:	83 e2       	ldi	r24, 0x23	; 35
 1a8:	e9 ef       	ldi	r30, 0xF9	; 249
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	31 97       	sbiw	r30, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <kEYBAD_u8Getkey+0xc8>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <kEYBAD_u8Getkey+0xce>
 1b2:	00 00       	nop
		while(!GET_BIT(KEYPAD_INPUT_PIN, IN3));
	}
	_delay_ms(1);								// delay between set and clear
	SET_BIT(KEYPAD_OUTPUT_PORT, OUT2);			// not in column 2
 1b4:	95 b3       	in	r25, 0x15	; 21
 1b6:	90 64       	ori	r25, 0x40	; 64
 1b8:	95 bb       	out	0x15, r25	; 21
	
	CLR_BIT(KEYPAD_OUTPUT_PORT, OUT3);			// output 0 column 3
 1ba:	95 b3       	in	r25, 0x15	; 21
 1bc:	9f 77       	andi	r25, 0x7F	; 127
 1be:	95 bb       	out	0x15, r25	; 21
	if(!GET_BIT(KEYPAD_INPUT_PIN, IN0)){		// "!" see which input be 0
 1c0:	98 99       	sbic	0x13, 0	; 19
 1c2:	04 c0       	rjmp	.+8      	; 0x1cc <kEYBAD_u8Getkey+0xe8>
		key = 'A';
		while(!GET_BIT(KEYPAD_INPUT_PIN, IN0));
 1c4:	98 9b       	sbis	0x13, 0	; 19
 1c6:	fe cf       	rjmp	.-4      	; 0x1c4 <kEYBAD_u8Getkey+0xe0>
	_delay_ms(1);								// delay between set and clear
	SET_BIT(KEYPAD_OUTPUT_PORT, OUT2);			// not in column 2
	
	CLR_BIT(KEYPAD_OUTPUT_PORT, OUT3);			// output 0 column 3
	if(!GET_BIT(KEYPAD_INPUT_PIN, IN0)){		// "!" see which input be 0
		key = 'A';
 1c8:	81 e4       	ldi	r24, 0x41	; 65
 1ca:	11 c0       	rjmp	.+34     	; 0x1ee <kEYBAD_u8Getkey+0x10a>
		while(!GET_BIT(KEYPAD_INPUT_PIN, IN0));
		}else if(!GET_BIT(KEYPAD_INPUT_PIN, IN1)){	// "!" see which input be 0
 1cc:	99 99       	sbic	0x13, 1	; 19
 1ce:	04 c0       	rjmp	.+8      	; 0x1d8 <kEYBAD_u8Getkey+0xf4>
		key = 'B';
		while(!GET_BIT(KEYPAD_INPUT_PIN, IN1));
 1d0:	99 9b       	sbis	0x13, 1	; 19
 1d2:	fe cf       	rjmp	.-4      	; 0x1d0 <kEYBAD_u8Getkey+0xec>
	CLR_BIT(KEYPAD_OUTPUT_PORT, OUT3);			// output 0 column 3
	if(!GET_BIT(KEYPAD_INPUT_PIN, IN0)){		// "!" see which input be 0
		key = 'A';
		while(!GET_BIT(KEYPAD_INPUT_PIN, IN0));
		}else if(!GET_BIT(KEYPAD_INPUT_PIN, IN1)){	// "!" see which input be 0
		key = 'B';
 1d4:	82 e4       	ldi	r24, 0x42	; 66
 1d6:	0b c0       	rjmp	.+22     	; 0x1ee <kEYBAD_u8Getkey+0x10a>
		while(!GET_BIT(KEYPAD_INPUT_PIN, IN1));
		}else if(!GET_BIT(KEYPAD_INPUT_PIN, IN2)){	// "!" see which input be 0
 1d8:	9a 99       	sbic	0x13, 2	; 19
 1da:	04 c0       	rjmp	.+8      	; 0x1e4 <kEYBAD_u8Getkey+0x100>
		key = 'C';
		while(!GET_BIT(KEYPAD_INPUT_PIN, IN2));
 1dc:	9a 9b       	sbis	0x13, 2	; 19
 1de:	fe cf       	rjmp	.-4      	; 0x1dc <kEYBAD_u8Getkey+0xf8>
		while(!GET_BIT(KEYPAD_INPUT_PIN, IN0));
		}else if(!GET_BIT(KEYPAD_INPUT_PIN, IN1)){	// "!" see which input be 0
		key = 'B';
		while(!GET_BIT(KEYPAD_INPUT_PIN, IN1));
		}else if(!GET_BIT(KEYPAD_INPUT_PIN, IN2)){	// "!" see which input be 0
		key = 'C';
 1e0:	83 e4       	ldi	r24, 0x43	; 67
 1e2:	05 c0       	rjmp	.+10     	; 0x1ee <kEYBAD_u8Getkey+0x10a>
		while(!GET_BIT(KEYPAD_INPUT_PIN, IN2));
		}else if(!GET_BIT(KEYPAD_INPUT_PIN, IN3)){	// "!" see which input be 0
 1e4:	9b 99       	sbic	0x13, 3	; 19
 1e6:	03 c0       	rjmp	.+6      	; 0x1ee <kEYBAD_u8Getkey+0x10a>
		key = 'D';
		while(!GET_BIT(KEYPAD_INPUT_PIN, IN3));
 1e8:	9b 9b       	sbis	0x13, 3	; 19
 1ea:	fe cf       	rjmp	.-4      	; 0x1e8 <kEYBAD_u8Getkey+0x104>
		while(!GET_BIT(KEYPAD_INPUT_PIN, IN1));
		}else if(!GET_BIT(KEYPAD_INPUT_PIN, IN2)){	// "!" see which input be 0
		key = 'C';
		while(!GET_BIT(KEYPAD_INPUT_PIN, IN2));
		}else if(!GET_BIT(KEYPAD_INPUT_PIN, IN3)){	// "!" see which input be 0
		key = 'D';
 1ec:	84 e4       	ldi	r24, 0x44	; 68
 1ee:	e9 ef       	ldi	r30, 0xF9	; 249
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	31 97       	sbiw	r30, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <kEYBAD_u8Getkey+0x10e>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <kEYBAD_u8Getkey+0x114>
 1f8:	00 00       	nop
		while(!GET_BIT(KEYPAD_INPUT_PIN, IN3));
	}
	_delay_ms(1);								// delay between set and clear
	SET_BIT(KEYPAD_OUTPUT_PORT, OUT3);			// not in column 3
 1fa:	95 b3       	in	r25, 0x15	; 21
 1fc:	90 68       	ori	r25, 0x80	; 128
 1fe:	95 bb       	out	0x15, r25	; 21
	
	return key;
 200:	08 95       	ret

00000202 <LCD_Send_Data_4BIT>:
}


void LCD_Send_Data_4BIT(u8 data) {
	// Set RS to 1 to indicate data transmission
	SET_BIT(C_Port, RS);
 202:	98 b3       	in	r25, 0x18	; 24
 204:	92 60       	ori	r25, 0x02	; 2
 206:	98 bb       	out	0x18, r25	; 24

	// Set RW to 0 for write mode
	CLR_BIT(C_Port, RW);
 208:	98 b3       	in	r25, 0x18	; 24
 20a:	9b 7f       	andi	r25, 0xFB	; 251
 20c:	98 bb       	out	0x18, r25	; 24

	// Load data to PORTA upper
	PORTA = (PORTA & 0x0F) | (data & 0xF0);
 20e:	9b b3       	in	r25, 0x1b	; 27
 210:	9f 70       	andi	r25, 0x0F	; 15
 212:	28 2f       	mov	r18, r24
 214:	20 7f       	andi	r18, 0xF0	; 240
 216:	92 2b       	or	r25, r18
 218:	9b bb       	out	0x1b, r25	; 27

	// Pulse EN to send the data
	SET_BIT(C_Port, EN);
 21a:	98 b3       	in	r25, 0x18	; 24
 21c:	98 60       	ori	r25, 0x08	; 8
 21e:	98 bb       	out	0x18, r25	; 24
 220:	ef e9       	ldi	r30, 0x9F	; 159
 222:	ff e0       	ldi	r31, 0x0F	; 15
 224:	31 97       	sbiw	r30, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <LCD_Send_Data_4BIT+0x22>
 228:	00 c0       	rjmp	.+0      	; 0x22a <LCD_Send_Data_4BIT+0x28>
 22a:	00 00       	nop
	_delay_ms(1);
	CLR_BIT(C_Port, EN);
 22c:	98 b3       	in	r25, 0x18	; 24
 22e:	97 7f       	andi	r25, 0xF7	; 247
 230:	98 bb       	out	0x18, r25	; 24
 232:	ef e9       	ldi	r30, 0x9F	; 159
 234:	ff e0       	ldi	r31, 0x0F	; 15
 236:	31 97       	sbiw	r30, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <LCD_Send_Data_4BIT+0x34>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <LCD_Send_Data_4BIT+0x3a>
 23c:	00 00       	nop
	
	_delay_ms(1);
	
	// Load data to PORTA lower
	PORTA = (PORTA & 0x0F) | ((data << 4));
 23e:	2b b3       	in	r18, 0x1b	; 27
 240:	f0 e1       	ldi	r31, 0x10	; 16
 242:	8f 9f       	mul	r24, r31
 244:	c0 01       	movw	r24, r0
 246:	11 24       	eor	r1, r1
 248:	92 2f       	mov	r25, r18
 24a:	9f 70       	andi	r25, 0x0F	; 15
 24c:	89 2b       	or	r24, r25
 24e:	8b bb       	out	0x1b, r24	; 27
	SET_BIT(C_Port, EN);
 250:	88 b3       	in	r24, 0x18	; 24
 252:	88 60       	ori	r24, 0x08	; 8
 254:	88 bb       	out	0x18, r24	; 24
 256:	8f e9       	ldi	r24, 0x9F	; 159
 258:	9f e0       	ldi	r25, 0x0F	; 15
 25a:	01 97       	sbiw	r24, 0x01	; 1
 25c:	f1 f7       	brne	.-4      	; 0x25a <LCD_Send_Data_4BIT+0x58>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <LCD_Send_Data_4BIT+0x5e>
 260:	00 00       	nop
	_delay_ms(1);
	CLR_BIT(C_Port, EN);
 262:	88 b3       	in	r24, 0x18	; 24
 264:	87 7f       	andi	r24, 0xF7	; 247
 266:	88 bb       	out	0x18, r24	; 24
 268:	9f ef       	ldi	r25, 0xFF	; 255
 26a:	e9 ef       	ldi	r30, 0xF9	; 249
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	91 50       	subi	r25, 0x01	; 1
 270:	e0 40       	sbci	r30, 0x00	; 0
 272:	f0 40       	sbci	r31, 0x00	; 0
 274:	e1 f7       	brne	.-8      	; 0x26e <LCD_Send_Data_4BIT+0x6c>
 276:	00 c0       	rjmp	.+0      	; 0x278 <LCD_Send_Data_4BIT+0x76>
 278:	00 00       	nop
 27a:	08 95       	ret

0000027c <LCD_Send_CMD_4BIT>:
	_delay_ms(20);
}

void LCD_Send_CMD_4BIT(u8 cmd) {
	// CLR RS to 0 to indicate data transmission
	CLR_BIT(C_Port, RS);
 27c:	98 b3       	in	r25, 0x18	; 24
 27e:	9d 7f       	andi	r25, 0xFD	; 253
 280:	98 bb       	out	0x18, r25	; 24

	// Set RW to 0 for write mode
	CLR_BIT(C_Port, RW);
 282:	98 b3       	in	r25, 0x18	; 24
 284:	9b 7f       	andi	r25, 0xFB	; 251
 286:	98 bb       	out	0x18, r25	; 24

	// Load data to PORTA upper
	PORTA = (PORTA & 0x0F) | (cmd & 0xF0);
 288:	9b b3       	in	r25, 0x1b	; 27
 28a:	9f 70       	andi	r25, 0x0F	; 15
 28c:	28 2f       	mov	r18, r24
 28e:	20 7f       	andi	r18, 0xF0	; 240
 290:	92 2b       	or	r25, r18
 292:	9b bb       	out	0x1b, r25	; 27

	// Pulse EN to send the data
	SET_BIT(C_Port, EN);
 294:	98 b3       	in	r25, 0x18	; 24
 296:	98 60       	ori	r25, 0x08	; 8
 298:	98 bb       	out	0x18, r25	; 24
 29a:	ef e9       	ldi	r30, 0x9F	; 159
 29c:	ff e0       	ldi	r31, 0x0F	; 15
 29e:	31 97       	sbiw	r30, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <LCD_Send_CMD_4BIT+0x22>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <LCD_Send_CMD_4BIT+0x28>
 2a4:	00 00       	nop
	_delay_ms(1);
	CLR_BIT(C_Port, EN);
 2a6:	98 b3       	in	r25, 0x18	; 24
 2a8:	97 7f       	andi	r25, 0xF7	; 247
 2aa:	98 bb       	out	0x18, r25	; 24
 2ac:	ef e9       	ldi	r30, 0x9F	; 159
 2ae:	ff e0       	ldi	r31, 0x0F	; 15
 2b0:	31 97       	sbiw	r30, 0x01	; 1
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <LCD_Send_CMD_4BIT+0x34>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <LCD_Send_CMD_4BIT+0x3a>
 2b6:	00 00       	nop
	
	_delay_ms(1);
	
	// Load data to PORTA lower
	PORTA = (PORTA & 0x0F) | (cmd << 4);
 2b8:	2b b3       	in	r18, 0x1b	; 27
 2ba:	f0 e1       	ldi	r31, 0x10	; 16
 2bc:	8f 9f       	mul	r24, r31
 2be:	c0 01       	movw	r24, r0
 2c0:	11 24       	eor	r1, r1
 2c2:	92 2f       	mov	r25, r18
 2c4:	9f 70       	andi	r25, 0x0F	; 15
 2c6:	89 2b       	or	r24, r25
 2c8:	8b bb       	out	0x1b, r24	; 27
	SET_BIT(C_Port, EN);
 2ca:	88 b3       	in	r24, 0x18	; 24
 2cc:	88 60       	ori	r24, 0x08	; 8
 2ce:	88 bb       	out	0x18, r24	; 24
 2d0:	8f e9       	ldi	r24, 0x9F	; 159
 2d2:	9f e0       	ldi	r25, 0x0F	; 15
 2d4:	01 97       	sbiw	r24, 0x01	; 1
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <LCD_Send_CMD_4BIT+0x58>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <LCD_Send_CMD_4BIT+0x5e>
 2da:	00 00       	nop
	_delay_ms(1);
	CLR_BIT(C_Port, EN);
 2dc:	88 b3       	in	r24, 0x18	; 24
 2de:	87 7f       	andi	r24, 0xF7	; 247
 2e0:	88 bb       	out	0x18, r24	; 24
 2e2:	9f ef       	ldi	r25, 0xFF	; 255
 2e4:	e9 ef       	ldi	r30, 0xF9	; 249
 2e6:	f0 e0       	ldi	r31, 0x00	; 0
 2e8:	91 50       	subi	r25, 0x01	; 1
 2ea:	e0 40       	sbci	r30, 0x00	; 0
 2ec:	f0 40       	sbci	r31, 0x00	; 0
 2ee:	e1 f7       	brne	.-8      	; 0x2e8 <LCD_Send_CMD_4BIT+0x6c>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <LCD_Send_CMD_4BIT+0x76>
 2f2:	00 00       	nop
 2f4:	08 95       	ret

000002f6 <LCD_vInit_4Bit>:
	_delay_ms(20);
}

void LCD_vInit_4Bit() {
	// Set data lines as output
	DDRA |= 0xF0;
 2f6:	8a b3       	in	r24, 0x1a	; 26
 2f8:	80 6f       	ori	r24, 0xF0	; 240
 2fa:	8a bb       	out	0x1a, r24	; 26

	// Set R/W, RS, and EN pins as output
	SET_BIT(C_DDR, RW);
 2fc:	87 b3       	in	r24, 0x17	; 23
 2fe:	84 60       	ori	r24, 0x04	; 4
 300:	87 bb       	out	0x17, r24	; 23
	SET_BIT(C_DDR, RS);
 302:	87 b3       	in	r24, 0x17	; 23
 304:	82 60       	ori	r24, 0x02	; 2
 306:	87 bb       	out	0x17, r24	; 23
	SET_BIT(C_DDR, EN);
 308:	87 b3       	in	r24, 0x17	; 23
 30a:	88 60       	ori	r24, 0x08	; 8
 30c:	87 bb       	out	0x17, r24	; 23
 30e:	8f e5       	ldi	r24, 0x5F	; 95
 310:	9a ee       	ldi	r25, 0xEA	; 234
 312:	01 97       	sbiw	r24, 0x01	; 1
 314:	f1 f7       	brne	.-4      	; 0x312 <LCD_vInit_4Bit+0x1c>
 316:	00 c0       	rjmp	.+0      	; 0x318 <LCD_vInit_4Bit+0x22>
 318:	00 00       	nop
	//wait for lcd
	_delay_ms(15);

	// Initialize the LCD module
	LCD_Send_CMD_4BIT(0x02);  // Move cursor to the home position	
 31a:	82 e0       	ldi	r24, 0x02	; 2
 31c:	0e 94 3e 01 	call	0x27c	; 0x27c <LCD_Send_CMD_4BIT>
	LCD_Send_CMD_4BIT(0x28);  // Initialize LCD in 4-bit mode
 320:	88 e2       	ldi	r24, 0x28	; 40
 322:	0e 94 3e 01 	call	0x27c	; 0x27c <LCD_Send_CMD_4BIT>
	LCD_Send_CMD_4BIT(0x0C);  // Turn on display, cursor off
 326:	8c e0       	ldi	r24, 0x0C	; 12
 328:	0e 94 3e 01 	call	0x27c	; 0x27c <LCD_Send_CMD_4BIT>
	LCD_Send_CMD_4BIT(0x06);  // Set entry mode to auto-increment
 32c:	86 e0       	ldi	r24, 0x06	; 6
 32e:	0e 94 3e 01 	call	0x27c	; 0x27c <LCD_Send_CMD_4BIT>
	LCD_Send_CMD_4BIT(0x01);  // Clear the screen
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	0e 94 3e 01 	call	0x27c	; 0x27c <LCD_Send_CMD_4BIT>
 338:	08 95       	ret

0000033a <LCD_Send_StringData_4bit>:
}
void LCD_Send_StringData_4bit(u8 *data){
 33a:	0f 93       	push	r16
 33c:	1f 93       	push	r17
 33e:	cf 93       	push	r28
 340:	8c 01       	movw	r16, r24
	u8 i = 0;
 342:	c0 e0       	ldi	r28, 0x00	; 0
	while (data[i] != '\0'){
 344:	03 c0       	rjmp	.+6      	; 0x34c <LCD_Send_StringData_4bit+0x12>
		LCD_Send_Data_4BIT(data[i]);
 346:	0e 94 01 01 	call	0x202	; 0x202 <LCD_Send_Data_4BIT>
		i++;
 34a:	cf 5f       	subi	r28, 0xFF	; 255
	LCD_Send_CMD_4BIT(0x06);  // Set entry mode to auto-increment
	LCD_Send_CMD_4BIT(0x01);  // Clear the screen
}
void LCD_Send_StringData_4bit(u8 *data){
	u8 i = 0;
	while (data[i] != '\0'){
 34c:	f8 01       	movw	r30, r16
 34e:	ec 0f       	add	r30, r28
 350:	f1 1d       	adc	r31, r1
 352:	80 81       	ld	r24, Z
 354:	81 11       	cpse	r24, r1
 356:	f7 cf       	rjmp	.-18     	; 0x346 <LCD_Send_StringData_4bit+0xc>
		LCD_Send_Data_4BIT(data[i]);
		i++;
	}
 358:	cf 91       	pop	r28
 35a:	1f 91       	pop	r17
 35c:	0f 91       	pop	r16
 35e:	08 95       	ret

00000360 <clearDisplay>:
#include "F:\Atmel\Drivers\LCD\LCD.interface.h"
#include "F:\Atmel\Drivers\LCD\LCD.c"

// Function to clear the LCD display
void clearDisplay() {
	LCD_Send_CMD_4BIT(0x01);
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	0e 94 3e 01 	call	0x27c	; 0x27c <LCD_Send_CMD_4BIT>
	LCD_Send_CMD_4BIT(0x02);
 366:	82 e0       	ldi	r24, 0x02	; 2
 368:	0e 94 3e 01 	call	0x27c	; 0x27c <LCD_Send_CMD_4BIT>
 36c:	08 95       	ret

0000036e <main>:
}

int main(void) {
	/* Initialize LCD and keypad */
	LCD_vInit_4Bit();
 36e:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD_vInit_4Bit>
	kEYBAD_vInit();
 372:	0e 94 41 00 	call	0x82	; 0x82 <kEYBAD_vInit>
	u8 reset = 0;
	s8 res; /* may be signed */

	while (1) {
		/* Get the first key */
		key1 = kEYBAD_u8Getkey();
 376:	0e 94 72 00 	call	0xe4	; 0xe4 <kEYBAD_u8Getkey>
 37a:	d8 2f       	mov	r29, r24
		op = kEYBAD_u8Getkey();
 37c:	0e 94 72 00 	call	0xe4	; 0xe4 <kEYBAD_u8Getkey>
 380:	c8 2f       	mov	r28, r24
		key2 = kEYBAD_u8Getkey();
 382:	0e 94 72 00 	call	0xe4	; 0xe4 <kEYBAD_u8Getkey>
 386:	18 2f       	mov	r17, r24

		/* Wait until a valid key is pressed */
		while (key1 == 'x') {
 388:	03 c0       	rjmp	.+6      	; 0x390 <main+0x22>
			key1 = kEYBAD_u8Getkey();
 38a:	0e 94 72 00 	call	0xe4	; 0xe4 <kEYBAD_u8Getkey>
 38e:	d8 2f       	mov	r29, r24
		key1 = kEYBAD_u8Getkey();
		op = kEYBAD_u8Getkey();
		key2 = kEYBAD_u8Getkey();

		/* Wait until a valid key is pressed */
		while (key1 == 'x') {
 390:	d8 37       	cpi	r29, 0x78	; 120
 392:	d9 f3       	breq	.-10     	; 0x38a <main+0x1c>
			key1 = kEYBAD_u8Getkey();
		}

		/* Display the first key */
		LCD_Send_Data_4BIT(key1);
 394:	8d 2f       	mov	r24, r29
 396:	0e 94 01 01 	call	0x202	; 0x202 <LCD_Send_Data_4BIT>

		/* Wait until a valid operator key is pressed */
		while (op == 'x') {
 39a:	03 c0       	rjmp	.+6      	; 0x3a2 <main+0x34>
			op = kEYBAD_u8Getkey();
 39c:	0e 94 72 00 	call	0xe4	; 0xe4 <kEYBAD_u8Getkey>
 3a0:	c8 2f       	mov	r28, r24

		/* Display the first key */
		LCD_Send_Data_4BIT(key1);

		/* Wait until a valid operator key is pressed */
		while (op == 'x') {
 3a2:	c8 37       	cpi	r28, 0x78	; 120
 3a4:	d9 f3       	breq	.-10     	; 0x39c <main+0x2e>
			op = kEYBAD_u8Getkey();
		}

		/* Display the operator based on the key */
		if (op == 'A') {
 3a6:	c1 34       	cpi	r28, 0x41	; 65
 3a8:	21 f4       	brne	.+8      	; 0x3b2 <main+0x44>
			LCD_Send_Data_4BIT('/');
 3aa:	8f e2       	ldi	r24, 0x2F	; 47
 3ac:	0e 94 01 01 	call	0x202	; 0x202 <LCD_Send_Data_4BIT>
 3b0:	27 c0       	rjmp	.+78     	; 0x400 <__EEPROM_REGION_LENGTH__>
		} else if (op == 'B') {
 3b2:	c2 34       	cpi	r28, 0x42	; 66
 3b4:	21 f4       	brne	.+8      	; 0x3be <main+0x50>
			LCD_Send_Data_4BIT('*');
 3b6:	8a e2       	ldi	r24, 0x2A	; 42
 3b8:	0e 94 01 01 	call	0x202	; 0x202 <LCD_Send_Data_4BIT>
 3bc:	21 c0       	rjmp	.+66     	; 0x400 <__EEPROM_REGION_LENGTH__>
		} else if (op == 'C') {
 3be:	c3 34       	cpi	r28, 0x43	; 67
 3c0:	21 f4       	brne	.+8      	; 0x3ca <main+0x5c>
			LCD_Send_Data_4BIT('-');
 3c2:	8d e2       	ldi	r24, 0x2D	; 45
 3c4:	0e 94 01 01 	call	0x202	; 0x202 <LCD_Send_Data_4BIT>
 3c8:	1b c0       	rjmp	.+54     	; 0x400 <__EEPROM_REGION_LENGTH__>
		} else if (op == 'D') {
 3ca:	c4 34       	cpi	r28, 0x44	; 68
 3cc:	21 f4       	brne	.+8      	; 0x3d6 <main+0x68>
			LCD_Send_Data_4BIT('+');
 3ce:	8b e2       	ldi	r24, 0x2B	; 43
 3d0:	0e 94 01 01 	call	0x202	; 0x202 <LCD_Send_Data_4BIT>
 3d4:	15 c0       	rjmp	.+42     	; 0x400 <__EEPROM_REGION_LENGTH__>
		} else {
			/* Handle invalid operator input */
			clearDisplay();
 3d6:	0e 94 b0 01 	call	0x360	; 0x360 <clearDisplay>
			LCD_Send_StringData_4bit("Invalid Entry!");
 3da:	80 e6       	ldi	r24, 0x60	; 96
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	0e 94 9d 01 	call	0x33a	; 0x33a <LCD_Send_StringData_4bit>
 3e2:	2f ef       	ldi	r18, 0xFF	; 255
 3e4:	89 e6       	ldi	r24, 0x69	; 105
 3e6:	98 e1       	ldi	r25, 0x18	; 24
 3e8:	21 50       	subi	r18, 0x01	; 1
 3ea:	80 40       	sbci	r24, 0x00	; 0
 3ec:	90 40       	sbci	r25, 0x00	; 0
 3ee:	e1 f7       	brne	.-8      	; 0x3e8 <main+0x7a>
 3f0:	00 c0       	rjmp	.+0      	; 0x3f2 <main+0x84>
 3f2:	00 00       	nop
			op = 'x';
			key1 = 'x';
			_delay_ms(500);
			clearDisplay();
 3f4:	0e 94 b0 01 	call	0x360	; 0x360 <clearDisplay>
			continue;
 3f8:	be cf       	rjmp	.-132    	; 0x376 <main+0x8>
		}

		/* Wait until a valid second key is pressed */
		while (key2 == 'x') {
			key2 = kEYBAD_u8Getkey();
 3fa:	0e 94 72 00 	call	0xe4	; 0xe4 <kEYBAD_u8Getkey>
 3fe:	18 2f       	mov	r17, r24
			clearDisplay();
			continue;
		}

		/* Wait until a valid second key is pressed */
		while (key2 == 'x') {
 400:	18 37       	cpi	r17, 0x78	; 120
 402:	d9 f3       	breq	.-10     	; 0x3fa <main+0x8c>
			key2 = kEYBAD_u8Getkey();
		}
		
		/* Display the second key */
		LCD_Send_Data_4BIT(key2);
 404:	81 2f       	mov	r24, r17
 406:	0e 94 01 01 	call	0x202	; 0x202 <LCD_Send_Data_4BIT>

		/* Handle division by zero when dividing by 0 */
		if (key2 == '0' && op == 'A') {
 40a:	10 33       	cpi	r17, 0x30	; 48
 40c:	a9 f4       	brne	.+42     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 40e:	c1 34       	cpi	r28, 0x41	; 65
 410:	99 f4       	brne	.+38     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
			LCD_Send_CMD_4BIT(0xC0);
 412:	80 ec       	ldi	r24, 0xC0	; 192
 414:	0e 94 3e 01 	call	0x27c	; 0x27c <LCD_Send_CMD_4BIT>
			LCD_Send_StringData_4bit("Invalid Div by 0!");
 418:	8f e6       	ldi	r24, 0x6F	; 111
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	0e 94 9d 01 	call	0x33a	; 0x33a <LCD_Send_StringData_4bit>
 420:	2f ef       	ldi	r18, 0xFF	; 255
 422:	89 e6       	ldi	r24, 0x69	; 105
 424:	98 e1       	ldi	r25, 0x18	; 24
 426:	21 50       	subi	r18, 0x01	; 1
 428:	80 40       	sbci	r24, 0x00	; 0
 42a:	90 40       	sbci	r25, 0x00	; 0
 42c:	e1 f7       	brne	.-8      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 42e:	00 c0       	rjmp	.+0      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 430:	00 00       	nop
			op = 'x';
			key1 = 'x';
			key2 = 'x';
			_delay_ms(500);
			clearDisplay();
 432:	0e 94 b0 01 	call	0x360	; 0x360 <clearDisplay>
			continue;
 436:	9f cf       	rjmp	.-194    	; 0x376 <main+0x8>
		}

		/* Calculate the result based on the operator */
		if (op == 'A') {
 438:	c1 34       	cpi	r28, 0x41	; 65
 43a:	59 f4       	brne	.+22     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
			res = (key1 - '0') / (key2 - '0');
 43c:	8d 2f       	mov	r24, r29
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	c0 97       	sbiw	r24, 0x30	; 48
 442:	61 2f       	mov	r22, r17
 444:	70 e0       	ldi	r23, 0x00	; 0
 446:	60 53       	subi	r22, 0x30	; 48
 448:	71 09       	sbc	r23, r1
 44a:	0e 94 95 02 	call	0x52a	; 0x52a <__divmodhi4>
 44e:	06 2f       	mov	r16, r22
 450:	18 c0       	rjmp	.+48     	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
		} else if (op == 'B') {
 452:	c2 34       	cpi	r28, 0x42	; 66
 454:	59 f4       	brne	.+22     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
			res = (key1 - '0') * (key2 - '0');
 456:	8d 2f       	mov	r24, r29
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	c0 97       	sbiw	r24, 0x30	; 48
 45c:	21 2f       	mov	r18, r17
 45e:	30 e0       	ldi	r19, 0x00	; 0
 460:	20 53       	subi	r18, 0x30	; 48
 462:	31 09       	sbc	r19, r1
 464:	82 9f       	mul	r24, r18
 466:	00 2d       	mov	r16, r0
 468:	11 24       	eor	r1, r1
 46a:	0b c0       	rjmp	.+22     	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
		} else if (op == 'C') {
 46c:	c3 34       	cpi	r28, 0x43	; 67
 46e:	19 f4       	brne	.+6      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
			res = (key1 - '0') - (key2 - '0');
 470:	0d 2f       	mov	r16, r29
 472:	01 1b       	sub	r16, r17
 474:	06 c0       	rjmp	.+12     	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
		} else if (op == 'D') {
 476:	c4 34       	cpi	r28, 0x44	; 68
 478:	21 f4       	brne	.+8      	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
			res = (key1 - '0') + (key2 - '0');
 47a:	8d 2f       	mov	r24, r29
 47c:	81 0f       	add	r24, r17
 47e:	00 ea       	ldi	r16, 0xA0	; 160
 480:	08 0f       	add	r16, r24
		}

		/* Wait until the equal sign key is pressed */
		eq = kEYBAD_u8Getkey();
 482:	0e 94 72 00 	call	0xe4	; 0xe4 <kEYBAD_u8Getkey>
		while (eq == 'x') {
 486:	02 c0       	rjmp	.+4      	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
			eq = kEYBAD_u8Getkey();
 488:	0e 94 72 00 	call	0xe4	; 0xe4 <kEYBAD_u8Getkey>
			res = (key1 - '0') + (key2 - '0');
		}

		/* Wait until the equal sign key is pressed */
		eq = kEYBAD_u8Getkey();
		while (eq == 'x') {
 48c:	88 37       	cpi	r24, 0x78	; 120
 48e:	e1 f3       	breq	.-8      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
			eq = kEYBAD_u8Getkey();
		}

		/* Display the equal sign */
		if (eq == '#') {
 490:	83 32       	cpi	r24, 0x23	; 35
 492:	31 f4       	brne	.+12     	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
			LCD_Send_Data_4BIT('=');
 494:	8d e3       	ldi	r24, 0x3D	; 61
 496:	0e 94 01 01 	call	0x202	; 0x202 <LCD_Send_Data_4BIT>
			clearDisplay();
			continue;
		}

		/* Handle negative results */
		if (res < 0) {
 49a:	00 23       	and	r16, r16
 49c:	7c f4       	brge	.+30     	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
 49e:	0a c0       	rjmp	.+20     	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
		/* Display the equal sign */
		if (eq == '#') {
			LCD_Send_Data_4BIT('=');
		} else {
			/* Handle invalid equal sign input */
			clearDisplay();
 4a0:	0e 94 b0 01 	call	0x360	; 0x360 <clearDisplay>
			LCD_Send_StringData_4bit("Invalid Entry!");
 4a4:	80 e6       	ldi	r24, 0x60	; 96
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	0e 94 9d 01 	call	0x33a	; 0x33a <LCD_Send_StringData_4bit>
			key1 = 'x';
			op = 'x';
			key2 = 'x';
			eq = 'x';
			res = 'x';
			clearDisplay();
 4ac:	0e 94 b0 01 	call	0x360	; 0x360 <clearDisplay>
			LCD_Send_StringData_4bit("Invalid Entry!");
			key1 = 'x';
			op = 'x';
			key2 = 'x';
			eq = 'x';
			res = 'x';
 4b0:	08 e7       	ldi	r16, 0x78	; 120
			clearDisplay();
			continue;
 4b2:	61 cf       	rjmp	.-318    	; 0x376 <main+0x8>
		}

		/* Handle negative results */
		if (res < 0) {
			LCD_Send_Data_4BIT('-');
 4b4:	8d e2       	ldi	r24, 0x2D	; 45
 4b6:	0e 94 01 01 	call	0x202	; 0x202 <LCD_Send_Data_4BIT>
			res = -res;
 4ba:	01 95       	neg	r16
		}

		/* Display the result digits */
		if (res / 10 != 0) {
 4bc:	89 e0       	ldi	r24, 0x09	; 9
 4be:	80 0f       	add	r24, r16
 4c0:	83 31       	cpi	r24, 0x13	; 19
 4c2:	58 f0       	brcs	.+22     	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
			LCD_Send_Data_4BIT(res / 10 + '0');
 4c4:	87 e6       	ldi	r24, 0x67	; 103
 4c6:	08 02       	muls	r16, r24
 4c8:	81 2d       	mov	r24, r1
 4ca:	11 24       	eor	r1, r1
 4cc:	85 95       	asr	r24
 4ce:	85 95       	asr	r24
 4d0:	07 fd       	sbrc	r16, 7
 4d2:	83 95       	inc	r24
 4d4:	80 5d       	subi	r24, 0xD0	; 208
 4d6:	0e 94 01 01 	call	0x202	; 0x202 <LCD_Send_Data_4BIT>
		}
		LCD_Send_Data_4BIT(res % 10 + '0');
 4da:	87 e6       	ldi	r24, 0x67	; 103
 4dc:	08 02       	muls	r16, r24
 4de:	81 2d       	mov	r24, r1
 4e0:	11 24       	eor	r1, r1
 4e2:	85 95       	asr	r24
 4e4:	85 95       	asr	r24
 4e6:	07 fd       	sbrc	r16, 7
 4e8:	83 95       	inc	r24
 4ea:	88 0f       	add	r24, r24
 4ec:	98 2f       	mov	r25, r24
 4ee:	99 0f       	add	r25, r25
 4f0:	99 0f       	add	r25, r25
 4f2:	89 0f       	add	r24, r25
 4f4:	20 2f       	mov	r18, r16
 4f6:	28 1b       	sub	r18, r24
 4f8:	82 2f       	mov	r24, r18
 4fa:	80 5d       	subi	r24, 0xD0	; 208
 4fc:	0e 94 01 01 	call	0x202	; 0x202 <LCD_Send_Data_4BIT>

		/* Check if the reset key is pressed */
		reset = kEYBAD_u8Getkey();
 500:	0e 94 72 00 	call	0xe4	; 0xe4 <kEYBAD_u8Getkey>

		/* Enter a loop to handle reset or other options */
		do {
			reset = kEYBAD_u8Getkey();
 504:	0e 94 72 00 	call	0xe4	; 0xe4 <kEYBAD_u8Getkey>
 508:	c8 2f       	mov	r28, r24
			if (reset == '*') {
 50a:	8a 32       	cpi	r24, 0x2A	; 42
 50c:	21 f4       	brne	.+8      	; 0x516 <__EEPROM_REGION_LENGTH__+0x116>
				key1 = 'x';
				op = 'x';
				key2 = 'x';
				eq = 'x';
				res = 'x';
				clearDisplay();
 50e:	0e 94 b0 01 	call	0x360	; 0x360 <clearDisplay>
			if (reset == '*') {
				key1 = 'x';
				op = 'x';
				key2 = 'x';
				eq = 'x';
				res = 'x';
 512:	08 e7       	ldi	r16, 0x78	; 120
 514:	07 c0       	rjmp	.+14     	; 0x524 <__EEPROM_REGION_LENGTH__+0x124>
				clearDisplay();
			} else {
				LCD_Send_CMD_4BIT(0xC0);
 516:	80 ec       	ldi	r24, 0xC0	; 192
 518:	0e 94 3e 01 	call	0x27c	; 0x27c <LCD_Send_CMD_4BIT>
				LCD_Send_StringData_4bit("ON/C");
 51c:	81 e8       	ldi	r24, 0x81	; 129
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	0e 94 9d 01 	call	0x33a	; 0x33a <LCD_Send_StringData_4bit>
				reset == 'x';
			}
		} while (reset != '*');
 524:	ca 32       	cpi	r28, 0x2A	; 42
 526:	71 f7       	brne	.-36     	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
 528:	26 cf       	rjmp	.-436    	; 0x376 <main+0x8>

0000052a <__divmodhi4>:
 52a:	97 fb       	bst	r25, 7
 52c:	07 2e       	mov	r0, r23
 52e:	16 f4       	brtc	.+4      	; 0x534 <__divmodhi4+0xa>
 530:	00 94       	com	r0
 532:	07 d0       	rcall	.+14     	; 0x542 <__divmodhi4_neg1>
 534:	77 fd       	sbrc	r23, 7
 536:	09 d0       	rcall	.+18     	; 0x54a <__divmodhi4_neg2>
 538:	0e 94 a9 02 	call	0x552	; 0x552 <__udivmodhi4>
 53c:	07 fc       	sbrc	r0, 7
 53e:	05 d0       	rcall	.+10     	; 0x54a <__divmodhi4_neg2>
 540:	3e f4       	brtc	.+14     	; 0x550 <__divmodhi4_exit>

00000542 <__divmodhi4_neg1>:
 542:	90 95       	com	r25
 544:	81 95       	neg	r24
 546:	9f 4f       	sbci	r25, 0xFF	; 255
 548:	08 95       	ret

0000054a <__divmodhi4_neg2>:
 54a:	70 95       	com	r23
 54c:	61 95       	neg	r22
 54e:	7f 4f       	sbci	r23, 0xFF	; 255

00000550 <__divmodhi4_exit>:
 550:	08 95       	ret

00000552 <__udivmodhi4>:
 552:	aa 1b       	sub	r26, r26
 554:	bb 1b       	sub	r27, r27
 556:	51 e1       	ldi	r21, 0x11	; 17
 558:	07 c0       	rjmp	.+14     	; 0x568 <__udivmodhi4_ep>

0000055a <__udivmodhi4_loop>:
 55a:	aa 1f       	adc	r26, r26
 55c:	bb 1f       	adc	r27, r27
 55e:	a6 17       	cp	r26, r22
 560:	b7 07       	cpc	r27, r23
 562:	10 f0       	brcs	.+4      	; 0x568 <__udivmodhi4_ep>
 564:	a6 1b       	sub	r26, r22
 566:	b7 0b       	sbc	r27, r23

00000568 <__udivmodhi4_ep>:
 568:	88 1f       	adc	r24, r24
 56a:	99 1f       	adc	r25, r25
 56c:	5a 95       	dec	r21
 56e:	a9 f7       	brne	.-22     	; 0x55a <__udivmodhi4_loop>
 570:	80 95       	com	r24
 572:	90 95       	com	r25
 574:	bc 01       	movw	r22, r24
 576:	cd 01       	movw	r24, r26
 578:	08 95       	ret

0000057a <_exit>:
 57a:	f8 94       	cli

0000057c <__stop_program>:
 57c:	ff cf       	rjmp	.-2      	; 0x57c <__stop_program>
