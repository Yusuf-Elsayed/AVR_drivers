
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000041a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000046e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000046e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001190  00000000  00000000  000005ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000849  00000000  00000000  0000173c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009bf  00000000  00000000  00001f85  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000016c  00000000  00000000  00002944  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004d1  00000000  00000000  00002ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b8c  00000000  00000000  00002f81  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00003b0d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 89 01 	call	0x312	; 0x312 <main>
  64:	0c 94 0b 02 	jmp	0x416	; 0x416 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <GPIO_voidConfigureBinInputOrOutput>:
		break;
		case C:
		DDRC = 0xFF;
		break;
		case D:
		DDRD = 0xFF;
  6c:	81 30       	cpi	r24, 0x01	; 1
  6e:	11 f1       	breq	.+68     	; 0xb4 <GPIO_voidConfigureBinInputOrOutput+0x48>
  70:	30 f0       	brcs	.+12     	; 0x7e <GPIO_voidConfigureBinInputOrOutput+0x12>
  72:	82 30       	cpi	r24, 0x02	; 2
  74:	d1 f1       	breq	.+116    	; 0xea <GPIO_voidConfigureBinInputOrOutput+0x7e>
  76:	83 30       	cpi	r24, 0x03	; 3
  78:	09 f4       	brne	.+2      	; 0x7c <GPIO_voidConfigureBinInputOrOutput+0x10>
  7a:	52 c0       	rjmp	.+164    	; 0x120 <GPIO_voidConfigureBinInputOrOutput+0xb4>
  7c:	08 95       	ret
  7e:	41 30       	cpi	r20, 0x01	; 1
  80:	59 f4       	brne	.+22     	; 0x98 <GPIO_voidConfigureBinInputOrOutput+0x2c>
  82:	2a b3       	in	r18, 0x1a	; 26
  84:	81 e0       	ldi	r24, 0x01	; 1
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	02 c0       	rjmp	.+4      	; 0x8e <GPIO_voidConfigureBinInputOrOutput+0x22>
  8a:	88 0f       	add	r24, r24
  8c:	99 1f       	adc	r25, r25
  8e:	6a 95       	dec	r22
  90:	e2 f7       	brpl	.-8      	; 0x8a <GPIO_voidConfigureBinInputOrOutput+0x1e>
  92:	82 2b       	or	r24, r18
  94:	8a bb       	out	0x1a, r24	; 26
  96:	08 95       	ret
  98:	41 11       	cpse	r20, r1
  9a:	5c c0       	rjmp	.+184    	; 0x154 <GPIO_voidConfigureBinInputOrOutput+0xe8>
  9c:	2a b3       	in	r18, 0x1a	; 26
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <GPIO_voidConfigureBinInputOrOutput+0x3c>
  a4:	88 0f       	add	r24, r24
  a6:	99 1f       	adc	r25, r25
  a8:	6a 95       	dec	r22
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <GPIO_voidConfigureBinInputOrOutput+0x38>
  ac:	80 95       	com	r24
  ae:	82 23       	and	r24, r18
  b0:	8a bb       	out	0x1a, r24	; 26
  b2:	08 95       	ret
  b4:	41 30       	cpi	r20, 0x01	; 1
  b6:	59 f4       	brne	.+22     	; 0xce <GPIO_voidConfigureBinInputOrOutput+0x62>
  b8:	27 b3       	in	r18, 0x17	; 23
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	02 c0       	rjmp	.+4      	; 0xc4 <GPIO_voidConfigureBinInputOrOutput+0x58>
  c0:	88 0f       	add	r24, r24
  c2:	99 1f       	adc	r25, r25
  c4:	6a 95       	dec	r22
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <GPIO_voidConfigureBinInputOrOutput+0x54>
  c8:	82 2b       	or	r24, r18
  ca:	87 bb       	out	0x17, r24	; 23
  cc:	08 95       	ret
  ce:	41 11       	cpse	r20, r1
  d0:	41 c0       	rjmp	.+130    	; 0x154 <GPIO_voidConfigureBinInputOrOutput+0xe8>
  d2:	27 b3       	in	r18, 0x17	; 23
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	02 c0       	rjmp	.+4      	; 0xde <GPIO_voidConfigureBinInputOrOutput+0x72>
  da:	88 0f       	add	r24, r24
  dc:	99 1f       	adc	r25, r25
  de:	6a 95       	dec	r22
  e0:	e2 f7       	brpl	.-8      	; 0xda <GPIO_voidConfigureBinInputOrOutput+0x6e>
  e2:	80 95       	com	r24
  e4:	82 23       	and	r24, r18
  e6:	87 bb       	out	0x17, r24	; 23
  e8:	08 95       	ret
  ea:	41 30       	cpi	r20, 0x01	; 1
  ec:	59 f4       	brne	.+22     	; 0x104 <GPIO_voidConfigureBinInputOrOutput+0x98>
  ee:	24 b3       	in	r18, 0x14	; 20
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <GPIO_voidConfigureBinInputOrOutput+0x8e>
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	6a 95       	dec	r22
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <GPIO_voidConfigureBinInputOrOutput+0x8a>
  fe:	82 2b       	or	r24, r18
 100:	84 bb       	out	0x14, r24	; 20
 102:	08 95       	ret
 104:	41 11       	cpse	r20, r1
 106:	26 c0       	rjmp	.+76     	; 0x154 <GPIO_voidConfigureBinInputOrOutput+0xe8>
 108:	24 b3       	in	r18, 0x14	; 20
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	02 c0       	rjmp	.+4      	; 0x114 <GPIO_voidConfigureBinInputOrOutput+0xa8>
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	6a 95       	dec	r22
 116:	e2 f7       	brpl	.-8      	; 0x110 <GPIO_voidConfigureBinInputOrOutput+0xa4>
 118:	80 95       	com	r24
 11a:	82 23       	and	r24, r18
 11c:	84 bb       	out	0x14, r24	; 20
 11e:	08 95       	ret
 120:	41 30       	cpi	r20, 0x01	; 1
 122:	59 f4       	brne	.+22     	; 0x13a <GPIO_voidConfigureBinInputOrOutput+0xce>
 124:	21 b3       	in	r18, 0x11	; 17
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	02 c0       	rjmp	.+4      	; 0x130 <GPIO_voidConfigureBinInputOrOutput+0xc4>
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	6a 95       	dec	r22
 132:	e2 f7       	brpl	.-8      	; 0x12c <GPIO_voidConfigureBinInputOrOutput+0xc0>
 134:	82 2b       	or	r24, r18
 136:	81 bb       	out	0x11, r24	; 17
 138:	08 95       	ret
 13a:	41 11       	cpse	r20, r1
 13c:	0b c0       	rjmp	.+22     	; 0x154 <GPIO_voidConfigureBinInputOrOutput+0xe8>
 13e:	21 b3       	in	r18, 0x11	; 17
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	02 c0       	rjmp	.+4      	; 0x14a <GPIO_voidConfigureBinInputOrOutput+0xde>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	6a 95       	dec	r22
 14c:	e2 f7       	brpl	.-8      	; 0x146 <GPIO_voidConfigureBinInputOrOutput+0xda>
 14e:	80 95       	com	r24
 150:	82 23       	and	r24, r18
 152:	81 bb       	out	0x11, r24	; 17
 154:	08 95       	ret

00000156 <GPIO_voidReadBin>:
	}
}

u8 GPIO_voidReadBin(u8 copy_portName, u8 copy_pinNum){
	u8 value = - 1;
	switch (copy_portName)
 156:	81 30       	cpi	r24, 0x01	; 1
 158:	79 f0       	breq	.+30     	; 0x178 <GPIO_voidReadBin+0x22>
 15a:	28 f0       	brcs	.+10     	; 0x166 <GPIO_voidReadBin+0x10>
 15c:	82 30       	cpi	r24, 0x02	; 2
 15e:	a9 f0       	breq	.+42     	; 0x18a <GPIO_voidReadBin+0x34>
 160:	83 30       	cpi	r24, 0x03	; 3
 162:	e1 f0       	breq	.+56     	; 0x19c <GPIO_voidReadBin+0x46>
 164:	24 c0       	rjmp	.+72     	; 0x1ae <GPIO_voidReadBin+0x58>
	{
		case A:
		value = GET_BIT(PINA, copy_pinNum);
 166:	89 b3       	in	r24, 0x19	; 25
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	02 c0       	rjmp	.+4      	; 0x170 <GPIO_voidReadBin+0x1a>
 16c:	95 95       	asr	r25
 16e:	87 95       	ror	r24
 170:	6a 95       	dec	r22
 172:	e2 f7       	brpl	.-8      	; 0x16c <GPIO_voidReadBin+0x16>
 174:	81 70       	andi	r24, 0x01	; 1
		break;
 176:	08 95       	ret
		case B:
		value = GET_BIT(PINB, copy_pinNum);
 178:	86 b3       	in	r24, 0x16	; 22
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	02 c0       	rjmp	.+4      	; 0x182 <GPIO_voidReadBin+0x2c>
 17e:	95 95       	asr	r25
 180:	87 95       	ror	r24
 182:	6a 95       	dec	r22
 184:	e2 f7       	brpl	.-8      	; 0x17e <GPIO_voidReadBin+0x28>
 186:	81 70       	andi	r24, 0x01	; 1
		break;
 188:	08 95       	ret
		case C:
		value = GET_BIT(PINC, copy_pinNum);
 18a:	83 b3       	in	r24, 0x13	; 19
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	02 c0       	rjmp	.+4      	; 0x194 <GPIO_voidReadBin+0x3e>
 190:	95 95       	asr	r25
 192:	87 95       	ror	r24
 194:	6a 95       	dec	r22
 196:	e2 f7       	brpl	.-8      	; 0x190 <GPIO_voidReadBin+0x3a>
 198:	81 70       	andi	r24, 0x01	; 1
		break;
 19a:	08 95       	ret
		case D:
		value = GET_BIT(PIND, copy_pinNum);
 19c:	80 b3       	in	r24, 0x10	; 16
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <GPIO_voidReadBin+0x50>
 1a2:	95 95       	asr	r25
 1a4:	87 95       	ror	r24
 1a6:	6a 95       	dec	r22
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <GPIO_voidReadBin+0x4c>
 1aa:	81 70       	andi	r24, 0x01	; 1
		break;
 1ac:	08 95       	ret
		break;
	}
}

u8 GPIO_voidReadBin(u8 copy_portName, u8 copy_pinNum){
	u8 value = - 1;
 1ae:	8f ef       	ldi	r24, 0xFF	; 255
		default:
		/* Do nothing */
		break;
	}
	return value;
}
 1b0:	08 95       	ret

000001b2 <LCD_Send_CMD>:
	u8 i = 0;
	while (data[i] != '\0'){
		LCD_Send_Data(data[i]);
		i++;
	}
}
 1b2:	98 b3       	in	r25, 0x18	; 24
 1b4:	9d 7f       	andi	r25, 0xFD	; 253
 1b6:	98 bb       	out	0x18, r25	; 24
 1b8:	98 b3       	in	r25, 0x18	; 24
 1ba:	9b 7f       	andi	r25, 0xFB	; 251
 1bc:	98 bb       	out	0x18, r25	; 24
 1be:	8b bb       	out	0x1b, r24	; 27
 1c0:	88 b3       	in	r24, 0x18	; 24
 1c2:	88 60       	ori	r24, 0x08	; 8
 1c4:	88 bb       	out	0x18, r24	; 24
 1c6:	89 ef       	ldi	r24, 0xF9	; 249
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <LCD_Send_CMD+0x18>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <LCD_Send_CMD+0x1e>
 1d0:	00 00       	nop
 1d2:	88 b3       	in	r24, 0x18	; 24
 1d4:	87 7f       	andi	r24, 0xF7	; 247
 1d6:	88 bb       	out	0x18, r24	; 24
 1d8:	87 e8       	ldi	r24, 0x87	; 135
 1da:	93 e1       	ldi	r25, 0x13	; 19
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <LCD_Send_CMD+0x2a>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <LCD_Send_CMD+0x30>
 1e2:	00 00       	nop
 1e4:	08 95       	ret

000001e6 <LCD_Send_Data_4BIT>:


void LCD_Send_Data_4BIT(u8 data) {
	// Set RS to 1 to indicate data transmission
	SET_BIT(C_Port, RS);
 1e6:	98 b3       	in	r25, 0x18	; 24
 1e8:	92 60       	ori	r25, 0x02	; 2
 1ea:	98 bb       	out	0x18, r25	; 24

	// Set RW to 0 for write mode
	CLR_BIT(C_Port, RW);
 1ec:	98 b3       	in	r25, 0x18	; 24
 1ee:	9b 7f       	andi	r25, 0xFB	; 251
 1f0:	98 bb       	out	0x18, r25	; 24

	// Load data to PORTA upper
	PORTA = (PORTA & 0x0F) | (data & 0xF0);
 1f2:	9b b3       	in	r25, 0x1b	; 27
 1f4:	9f 70       	andi	r25, 0x0F	; 15
 1f6:	28 2f       	mov	r18, r24
 1f8:	20 7f       	andi	r18, 0xF0	; 240
 1fa:	92 2b       	or	r25, r18
 1fc:	9b bb       	out	0x1b, r25	; 27

	// Pulse EN to send the data
	SET_BIT(C_Port, EN);
 1fe:	98 b3       	in	r25, 0x18	; 24
 200:	98 60       	ori	r25, 0x08	; 8
 202:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 204:	e9 ef       	ldi	r30, 0xF9	; 249
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	31 97       	sbiw	r30, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <LCD_Send_Data_4BIT+0x22>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <LCD_Send_Data_4BIT+0x28>
 20e:	00 00       	nop
	_delay_ms(1);
	CLR_BIT(C_Port, EN);
 210:	98 b3       	in	r25, 0x18	; 24
 212:	97 7f       	andi	r25, 0xF7	; 247
 214:	98 bb       	out	0x18, r25	; 24
 216:	e9 ef       	ldi	r30, 0xF9	; 249
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	31 97       	sbiw	r30, 0x01	; 1
 21c:	f1 f7       	brne	.-4      	; 0x21a <LCD_Send_Data_4BIT+0x34>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <LCD_Send_Data_4BIT+0x3a>
 220:	00 00       	nop
	
	_delay_ms(1);
	
	// Load data to PORTA lower
	PORTA = (PORTA & 0x0F) | ((data << 4));
 222:	2b b3       	in	r18, 0x1b	; 27
 224:	f0 e1       	ldi	r31, 0x10	; 16
 226:	8f 9f       	mul	r24, r31
 228:	c0 01       	movw	r24, r0
 22a:	11 24       	eor	r1, r1
 22c:	92 2f       	mov	r25, r18
 22e:	9f 70       	andi	r25, 0x0F	; 15
 230:	89 2b       	or	r24, r25
 232:	8b bb       	out	0x1b, r24	; 27
	SET_BIT(C_Port, EN);
 234:	88 b3       	in	r24, 0x18	; 24
 236:	88 60       	ori	r24, 0x08	; 8
 238:	88 bb       	out	0x18, r24	; 24
 23a:	89 ef       	ldi	r24, 0xF9	; 249
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <LCD_Send_Data_4BIT+0x58>
 242:	00 c0       	rjmp	.+0      	; 0x244 <LCD_Send_Data_4BIT+0x5e>
 244:	00 00       	nop
	_delay_ms(1);
	CLR_BIT(C_Port, EN);
 246:	88 b3       	in	r24, 0x18	; 24
 248:	87 7f       	andi	r24, 0xF7	; 247
 24a:	88 bb       	out	0x18, r24	; 24
 24c:	e7 e8       	ldi	r30, 0x87	; 135
 24e:	f3 e1       	ldi	r31, 0x13	; 19
 250:	31 97       	sbiw	r30, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <LCD_Send_Data_4BIT+0x6a>
 254:	00 c0       	rjmp	.+0      	; 0x256 <LCD_Send_Data_4BIT+0x70>
 256:	00 00       	nop
 258:	08 95       	ret

0000025a <LCD_Send_CMD_4BIT>:
	_delay_ms(20);
}

void LCD_Send_CMD_4BIT(u8 cmd) {
	// CLR RS to 0 to indicate data transmission
	CLR_BIT(C_Port, RS);
 25a:	98 b3       	in	r25, 0x18	; 24
 25c:	9d 7f       	andi	r25, 0xFD	; 253
 25e:	98 bb       	out	0x18, r25	; 24

	// Set RW to 0 for write mode
	CLR_BIT(C_Port, RW);
 260:	98 b3       	in	r25, 0x18	; 24
 262:	9b 7f       	andi	r25, 0xFB	; 251
 264:	98 bb       	out	0x18, r25	; 24

	// Load data to PORTA upper
	PORTA = (PORTA & 0x0F) | (cmd & 0xF0);
 266:	9b b3       	in	r25, 0x1b	; 27
 268:	9f 70       	andi	r25, 0x0F	; 15
 26a:	28 2f       	mov	r18, r24
 26c:	20 7f       	andi	r18, 0xF0	; 240
 26e:	92 2b       	or	r25, r18
 270:	9b bb       	out	0x1b, r25	; 27

	// Pulse EN to send the data
	SET_BIT(C_Port, EN);
 272:	98 b3       	in	r25, 0x18	; 24
 274:	98 60       	ori	r25, 0x08	; 8
 276:	98 bb       	out	0x18, r25	; 24
 278:	e9 ef       	ldi	r30, 0xF9	; 249
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	31 97       	sbiw	r30, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <LCD_Send_CMD_4BIT+0x22>
 280:	00 c0       	rjmp	.+0      	; 0x282 <LCD_Send_CMD_4BIT+0x28>
 282:	00 00       	nop
	_delay_ms(1);
	CLR_BIT(C_Port, EN);
 284:	98 b3       	in	r25, 0x18	; 24
 286:	97 7f       	andi	r25, 0xF7	; 247
 288:	98 bb       	out	0x18, r25	; 24
 28a:	e9 ef       	ldi	r30, 0xF9	; 249
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	31 97       	sbiw	r30, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <LCD_Send_CMD_4BIT+0x34>
 292:	00 c0       	rjmp	.+0      	; 0x294 <LCD_Send_CMD_4BIT+0x3a>
 294:	00 00       	nop
	
	_delay_ms(1);
	
	// Load data to PORTA lower
	PORTA = (PORTA & 0x0F) | (cmd << 4);
 296:	2b b3       	in	r18, 0x1b	; 27
 298:	f0 e1       	ldi	r31, 0x10	; 16
 29a:	8f 9f       	mul	r24, r31
 29c:	c0 01       	movw	r24, r0
 29e:	11 24       	eor	r1, r1
 2a0:	92 2f       	mov	r25, r18
 2a2:	9f 70       	andi	r25, 0x0F	; 15
 2a4:	89 2b       	or	r24, r25
 2a6:	8b bb       	out	0x1b, r24	; 27
	SET_BIT(C_Port, EN);
 2a8:	88 b3       	in	r24, 0x18	; 24
 2aa:	88 60       	ori	r24, 0x08	; 8
 2ac:	88 bb       	out	0x18, r24	; 24
 2ae:	89 ef       	ldi	r24, 0xF9	; 249
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <LCD_Send_CMD_4BIT+0x58>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <LCD_Send_CMD_4BIT+0x5e>
 2b8:	00 00       	nop
	_delay_ms(1);
	CLR_BIT(C_Port, EN);
 2ba:	88 b3       	in	r24, 0x18	; 24
 2bc:	87 7f       	andi	r24, 0xF7	; 247
 2be:	88 bb       	out	0x18, r24	; 24
 2c0:	e7 e8       	ldi	r30, 0x87	; 135
 2c2:	f3 e1       	ldi	r31, 0x13	; 19
 2c4:	31 97       	sbiw	r30, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <LCD_Send_CMD_4BIT+0x6a>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <LCD_Send_CMD_4BIT+0x70>
 2ca:	00 00       	nop
 2cc:	08 95       	ret

000002ce <LCD_vInit_4Bit>:
	_delay_ms(20);
}

void LCD_vInit_4Bit() {
	// Set data lines as output
	DDRA |= 0xF0;
 2ce:	8a b3       	in	r24, 0x1a	; 26
 2d0:	80 6f       	ori	r24, 0xF0	; 240
 2d2:	8a bb       	out	0x1a, r24	; 26

	// Set R/W, RS, and EN pins as output
	SET_BIT(C_DDR, RW);
 2d4:	87 b3       	in	r24, 0x17	; 23
 2d6:	84 60       	ori	r24, 0x04	; 4
 2d8:	87 bb       	out	0x17, r24	; 23
	SET_BIT(C_DDR, RS);
 2da:	87 b3       	in	r24, 0x17	; 23
 2dc:	82 60       	ori	r24, 0x02	; 2
 2de:	87 bb       	out	0x17, r24	; 23
	SET_BIT(C_DDR, EN);
 2e0:	87 b3       	in	r24, 0x17	; 23
 2e2:	88 60       	ori	r24, 0x08	; 8
 2e4:	87 bb       	out	0x17, r24	; 23
 2e6:	85 ea       	ldi	r24, 0xA5	; 165
 2e8:	9e e0       	ldi	r25, 0x0E	; 14
 2ea:	01 97       	sbiw	r24, 0x01	; 1
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <LCD_vInit_4Bit+0x1c>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <LCD_vInit_4Bit+0x22>
 2f0:	00 00       	nop
	//wait for lcd
	_delay_ms(15);

	// Initialize the LCD module
	LCD_Send_CMD_4BIT(0x02);  // Move cursor to the home position	
 2f2:	82 e0       	ldi	r24, 0x02	; 2
 2f4:	0e 94 2d 01 	call	0x25a	; 0x25a <LCD_Send_CMD_4BIT>
	LCD_Send_CMD_4BIT(0x28);  // Initialize LCD in 4-bit mode
 2f8:	88 e2       	ldi	r24, 0x28	; 40
 2fa:	0e 94 2d 01 	call	0x25a	; 0x25a <LCD_Send_CMD_4BIT>
	LCD_Send_CMD_4BIT(0x0C);  // Turn on display, cursor off
 2fe:	8c e0       	ldi	r24, 0x0C	; 12
 300:	0e 94 2d 01 	call	0x25a	; 0x25a <LCD_Send_CMD_4BIT>
	LCD_Send_CMD_4BIT(0x06);  // Set entry mode to auto-increment
 304:	86 e0       	ldi	r24, 0x06	; 6
 306:	0e 94 2d 01 	call	0x25a	; 0x25a <LCD_Send_CMD_4BIT>
	LCD_Send_CMD_4BIT(0x01);  // Clear the screen
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	0e 94 2d 01 	call	0x25a	; 0x25a <LCD_Send_CMD_4BIT>
 310:	08 95       	ret

00000312 <main>:
	/*LCD_vInit();
	LCD_Send_Data('Y');
	LCD_Send_Data('o');
	
	LCD_Send_StringData("Youssef");*/
	GPIO_voidConfigureBinInputOrOutput(A, sw0B, input);
 312:	40 e0       	ldi	r20, 0x00	; 0
 314:	60 e0       	ldi	r22, 0x00	; 0
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	0e 94 36 00 	call	0x6c	; 0x6c <GPIO_voidConfigureBinInputOrOutput>
	GPIO_voidConfigureBinInputOrOutput(A, sw1D, input);
 31c:	40 e0       	ldi	r20, 0x00	; 0
 31e:	66 e0       	ldi	r22, 0x06	; 6
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	0e 94 36 00 	call	0x6c	; 0x6c <GPIO_voidConfigureBinInputOrOutput>

	LCD_vInit_4Bit();
 326:	0e 94 67 01 	call	0x2ce	; 0x2ce <LCD_vInit_4Bit>
	u8 i = 0;
    /* Replace with your application code */
	LCD_Send_Data_4BIT(i / 10 + 48); // char start 0 at 48 ASCII
 32a:	80 e3       	ldi	r24, 0x30	; 48
 32c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <LCD_Send_Data_4BIT>
	LCD_Send_Data_4BIT(i % 10 + 48); // char start 0 at 48 ASCII
 330:	80 e3       	ldi	r24, 0x30	; 48
 332:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <LCD_Send_Data_4BIT>
	LCD_Send_StringData("Youssef");*/
	GPIO_voidConfigureBinInputOrOutput(A, sw0B, input);
	GPIO_voidConfigureBinInputOrOutput(A, sw1D, input);

	LCD_vInit_4Bit();
	u8 i = 0;
 336:	d0 e0       	ldi	r29, 0x00	; 0
    /* Replace with your application code */
	LCD_Send_Data_4BIT(i / 10 + 48); // char start 0 at 48 ASCII
	LCD_Send_Data_4BIT(i % 10 + 48); // char start 0 at 48 ASCII
    while (1) 
    {
		if(GPIO_voidReadBin(B, sw0B)){
 338:	60 e0       	ldi	r22, 0x00	; 0
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	0e 94 ab 00 	call	0x156	; 0x156 <GPIO_voidReadBin>
 340:	88 23       	and	r24, r24
 342:	99 f1       	breq	.+102    	; 0x3aa <main+0x98>
			if(i == 99)
 344:	d3 36       	cpi	r29, 0x63	; 99
 346:	11 f0       	breq	.+4      	; 0x34c <main+0x3a>
				i = 0;
			else 
				i++;
 348:	df 5f       	subi	r29, 0xFF	; 255
 34a:	01 c0       	rjmp	.+2      	; 0x34e <main+0x3c>
	LCD_Send_Data_4BIT(i % 10 + 48); // char start 0 at 48 ASCII
    while (1) 
    {
		if(GPIO_voidReadBin(B, sw0B)){
			if(i == 99)
				i = 0;
 34c:	d0 e0       	ldi	r29, 0x00	; 0
			else 
				i++;
			LCD_Send_CMD(0x01);  // Clear display
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_Send_CMD>
 354:	8f e3       	ldi	r24, 0x3F	; 63
 356:	9f e1       	ldi	r25, 0x1F	; 31
 358:	01 97       	sbiw	r24, 0x01	; 1
 35a:	f1 f7       	brne	.-4      	; 0x358 <main+0x46>
 35c:	00 c0       	rjmp	.+0      	; 0x35e <main+0x4c>
 35e:	00 00       	nop
			_delay_ms(2);        // Wait for the display to clear
			LCD_Send_CMD(0x02);  // Move cursor to home position
 360:	82 e0       	ldi	r24, 0x02	; 2
 362:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_Send_CMD>
 366:	8f e3       	ldi	r24, 0x3F	; 63
 368:	9f e1       	ldi	r25, 0x1F	; 31
 36a:	01 97       	sbiw	r24, 0x01	; 1
 36c:	f1 f7       	brne	.-4      	; 0x36a <main+0x58>
 36e:	00 c0       	rjmp	.+0      	; 0x370 <main+0x5e>
 370:	00 00       	nop
			_delay_ms(2);        // Wait for the cursor to move
			LCD_Send_Data_4BIT(i / 10 + 48); // char start 0 at 48 ASCII
 372:	cd ec       	ldi	r28, 0xCD	; 205
 374:	dc 9f       	mul	r29, r28
 376:	c1 2d       	mov	r28, r1
 378:	11 24       	eor	r1, r1
 37a:	c6 95       	lsr	r28
 37c:	c6 95       	lsr	r28
 37e:	c6 95       	lsr	r28
 380:	80 e3       	ldi	r24, 0x30	; 48
 382:	8c 0f       	add	r24, r28
 384:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <LCD_Send_Data_4BIT>
			LCD_Send_Data_4BIT(i % 10 + 48); // char start 0 at 48 ASCII
 388:	cc 0f       	add	r28, r28
 38a:	8c 2f       	mov	r24, r28
 38c:	88 0f       	add	r24, r24
 38e:	88 0f       	add	r24, r24
 390:	c8 0f       	add	r28, r24
 392:	8d 2f       	mov	r24, r29
 394:	8c 1b       	sub	r24, r28
 396:	80 5d       	subi	r24, 0xD0	; 208
 398:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <LCD_Send_Data_4BIT>
			while(GPIO_voidReadBin(B, sw0B));
 39c:	60 e0       	ldi	r22, 0x00	; 0
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	0e 94 ab 00 	call	0x156	; 0x156 <GPIO_voidReadBin>
 3a4:	81 11       	cpse	r24, r1
 3a6:	fa cf       	rjmp	.-12     	; 0x39c <main+0x8a>
 3a8:	c7 cf       	rjmp	.-114    	; 0x338 <main+0x26>
		}else if(GPIO_voidReadBin(D, sw1D)){
 3aa:	66 e0       	ldi	r22, 0x06	; 6
 3ac:	83 e0       	ldi	r24, 0x03	; 3
 3ae:	0e 94 ab 00 	call	0x156	; 0x156 <GPIO_voidReadBin>
 3b2:	88 23       	and	r24, r24
 3b4:	09 f2       	breq	.-126    	; 0x338 <main+0x26>
			if(i == 0)
 3b6:	d1 11       	cpse	r29, r1
				i = 0;
			else
				i--;
 3b8:	d1 50       	subi	r29, 0x01	; 1
			LCD_Send_CMD(0x01);  // Clear display
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_Send_CMD>
 3c0:	8f e3       	ldi	r24, 0x3F	; 63
 3c2:	9f e1       	ldi	r25, 0x1F	; 31
 3c4:	01 97       	sbiw	r24, 0x01	; 1
 3c6:	f1 f7       	brne	.-4      	; 0x3c4 <main+0xb2>
 3c8:	00 c0       	rjmp	.+0      	; 0x3ca <main+0xb8>
 3ca:	00 00       	nop
			_delay_ms(2);        // Wait for the display to clear
			LCD_Send_CMD(0x02);  // Move cursor to home position
 3cc:	82 e0       	ldi	r24, 0x02	; 2
 3ce:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_Send_CMD>
 3d2:	8f e3       	ldi	r24, 0x3F	; 63
 3d4:	9f e1       	ldi	r25, 0x1F	; 31
 3d6:	01 97       	sbiw	r24, 0x01	; 1
 3d8:	f1 f7       	brne	.-4      	; 0x3d6 <main+0xc4>
 3da:	00 c0       	rjmp	.+0      	; 0x3dc <main+0xca>
 3dc:	00 00       	nop
			_delay_ms(2);        // Wait for the cursor to move
			LCD_Send_Data_4BIT(i / 10 + 48); // char start 0 at 48 ASCII
 3de:	cd ec       	ldi	r28, 0xCD	; 205
 3e0:	dc 9f       	mul	r29, r28
 3e2:	c1 2d       	mov	r28, r1
 3e4:	11 24       	eor	r1, r1
 3e6:	c6 95       	lsr	r28
 3e8:	c6 95       	lsr	r28
 3ea:	c6 95       	lsr	r28
 3ec:	80 e3       	ldi	r24, 0x30	; 48
 3ee:	8c 0f       	add	r24, r28
 3f0:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <LCD_Send_Data_4BIT>
			LCD_Send_Data_4BIT(i % 10 + 48); // char start 0 at 48 ASCII
 3f4:	cc 0f       	add	r28, r28
 3f6:	8c 2f       	mov	r24, r28
 3f8:	88 0f       	add	r24, r24
 3fa:	88 0f       	add	r24, r24
 3fc:	c8 0f       	add	r28, r24
 3fe:	8d 2f       	mov	r24, r29
 400:	8c 1b       	sub	r24, r28
 402:	80 5d       	subi	r24, 0xD0	; 208
 404:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <LCD_Send_Data_4BIT>
			while(GPIO_voidReadBin(D, sw1D));
 408:	66 e0       	ldi	r22, 0x06	; 6
 40a:	83 e0       	ldi	r24, 0x03	; 3
 40c:	0e 94 ab 00 	call	0x156	; 0x156 <GPIO_voidReadBin>
 410:	81 11       	cpse	r24, r1
 412:	fa cf       	rjmp	.-12     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 414:	91 cf       	rjmp	.-222    	; 0x338 <main+0x26>

00000416 <_exit>:
 416:	f8 94       	cli

00000418 <__stop_program>:
 418:	ff cf       	rjmp	.-2      	; 0x418 <__stop_program>
