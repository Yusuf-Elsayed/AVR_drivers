
EXTI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000562  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000562  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000562  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000594  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  000005d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fcb  00000000  00000000  000006a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006fd  00000000  00000000  0000166b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000998  00000000  00000000  00001d68  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d0  00000000  00000000  00002700  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000507  00000000  00000000  000028d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bf2  00000000  00000000  00002dd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  000039c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 17 02 	call	0x42e	; 0x42e <main>
  74:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <EXTI_vInt0_Init>:
		CLR_BIT(MCUCR, ISC01);
	#elif INTERRUPT_REQUEST_STATE == ANY_CHANGE
		SET_BIT(MCUCR, ISC00);     /* Set INT0 to trigger on any logical change */
		CLR_BIT(MCUCR, ISC01);
	#elif INTERRUPT_REQUEST_STATE == FALLING
		CLR_BIT(MCUCR, ISC00);     /* Set INT0 to trigger on falling edge */
  7c:	85 b7       	in	r24, 0x35	; 53
  7e:	8e 7f       	andi	r24, 0xFE	; 254
  80:	85 bf       	out	0x35, r24	; 53
		SET_BIT(MCUCR, ISC01);
  82:	85 b7       	in	r24, 0x35	; 53
  84:	82 60       	ori	r24, 0x02	; 2
  86:	85 bf       	out	0x35, r24	; 53
		SET_BIT(MCUCR, ISC00);     /* Set INT0 to trigger on rising edge */
		SET_BIT(MCUCR, ISC01);
	#endif
	
	/* Enable external interrupt INT0 */
	SET_BIT(GICR, INT0);
  88:	8b b7       	in	r24, 0x3b	; 59
  8a:	80 64       	ori	r24, 0x40	; 64
  8c:	8b bf       	out	0x3b, r24	; 59
	
	/* Enable global interrupt */
	sei();
  8e:	78 94       	sei
  90:	08 95       	ret

00000092 <EXTI_vInt1_Init>:
		CLR_BIT(MCUCR, ISC11);
	#elif INTERRUPT_REQUEST_STATE == ANY_CHANGE
		SET_BIT(MCUCR, ISC10);     /* Set INT1 to trigger on any logical change */
		CLR_BIT(MCUCR, ISC11);
	#elif INTERRUPT_REQUEST_STATE == FALLING
		CLR_BIT(MCUCR, ISC10);     /* Set INT1 to trigger on falling edge */
  92:	85 b7       	in	r24, 0x35	; 53
  94:	8b 7f       	andi	r24, 0xFB	; 251
  96:	85 bf       	out	0x35, r24	; 53
		SET_BIT(MCUCR, ISC11);
  98:	85 b7       	in	r24, 0x35	; 53
  9a:	88 60       	ori	r24, 0x08	; 8
  9c:	85 bf       	out	0x35, r24	; 53
		SET_BIT(MCUCR, ISC10);     /* Set INT1 to trigger on rising edge */
		SET_BIT(MCUCR, ISC11);
	#endif
	
	/* Enable external interrupt INT1 */
	SET_BIT(GICR, INT1);
  9e:	8b b7       	in	r24, 0x3b	; 59
  a0:	80 68       	ori	r24, 0x80	; 128
  a2:	8b bf       	out	0x3b, r24	; 59
	
	/* Enable global interrupt */
	sei();
  a4:	78 94       	sei
  a6:	08 95       	ret

000000a8 <GPIO_voidConfigureBinInputOrOutput>:
	u8 i = 0;
	while (data[i] != '\0'){
		LCD_Send_Data_4BIT(data[i]);
		i++;
	}
  a8:	81 30       	cpi	r24, 0x01	; 1
  aa:	11 f1       	breq	.+68     	; 0xf0 <GPIO_voidConfigureBinInputOrOutput+0x48>
  ac:	30 f0       	brcs	.+12     	; 0xba <GPIO_voidConfigureBinInputOrOutput+0x12>
  ae:	82 30       	cpi	r24, 0x02	; 2
  b0:	d1 f1       	breq	.+116    	; 0x126 <GPIO_voidConfigureBinInputOrOutput+0x7e>
  b2:	83 30       	cpi	r24, 0x03	; 3
  b4:	09 f4       	brne	.+2      	; 0xb8 <GPIO_voidConfigureBinInputOrOutput+0x10>
  b6:	52 c0       	rjmp	.+164    	; 0x15c <GPIO_voidConfigureBinInputOrOutput+0xb4>
  b8:	08 95       	ret
  ba:	41 30       	cpi	r20, 0x01	; 1
  bc:	59 f4       	brne	.+22     	; 0xd4 <GPIO_voidConfigureBinInputOrOutput+0x2c>
  be:	2a b3       	in	r18, 0x1a	; 26
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	02 c0       	rjmp	.+4      	; 0xca <GPIO_voidConfigureBinInputOrOutput+0x22>
  c6:	88 0f       	add	r24, r24
  c8:	99 1f       	adc	r25, r25
  ca:	6a 95       	dec	r22
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <GPIO_voidConfigureBinInputOrOutput+0x1e>
  ce:	82 2b       	or	r24, r18
  d0:	8a bb       	out	0x1a, r24	; 26
  d2:	08 95       	ret
  d4:	41 11       	cpse	r20, r1
  d6:	5c c0       	rjmp	.+184    	; 0x190 <GPIO_voidConfigureBinInputOrOutput+0xe8>
  d8:	2a b3       	in	r18, 0x1a	; 26
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <GPIO_voidConfigureBinInputOrOutput+0x3c>
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <GPIO_voidConfigureBinInputOrOutput+0x38>
  e8:	80 95       	com	r24
  ea:	82 23       	and	r24, r18
  ec:	8a bb       	out	0x1a, r24	; 26
  ee:	08 95       	ret
  f0:	41 30       	cpi	r20, 0x01	; 1
  f2:	59 f4       	brne	.+22     	; 0x10a <GPIO_voidConfigureBinInputOrOutput+0x62>
  f4:	27 b3       	in	r18, 0x17	; 23
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	02 c0       	rjmp	.+4      	; 0x100 <GPIO_voidConfigureBinInputOrOutput+0x58>
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	6a 95       	dec	r22
 102:	e2 f7       	brpl	.-8      	; 0xfc <GPIO_voidConfigureBinInputOrOutput+0x54>
 104:	82 2b       	or	r24, r18
 106:	87 bb       	out	0x17, r24	; 23
 108:	08 95       	ret
 10a:	41 11       	cpse	r20, r1
 10c:	41 c0       	rjmp	.+130    	; 0x190 <GPIO_voidConfigureBinInputOrOutput+0xe8>
 10e:	27 b3       	in	r18, 0x17	; 23
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	02 c0       	rjmp	.+4      	; 0x11a <GPIO_voidConfigureBinInputOrOutput+0x72>
 116:	88 0f       	add	r24, r24
 118:	99 1f       	adc	r25, r25
 11a:	6a 95       	dec	r22
 11c:	e2 f7       	brpl	.-8      	; 0x116 <GPIO_voidConfigureBinInputOrOutput+0x6e>
 11e:	80 95       	com	r24
 120:	82 23       	and	r24, r18
 122:	87 bb       	out	0x17, r24	; 23
 124:	08 95       	ret
 126:	41 30       	cpi	r20, 0x01	; 1
 128:	59 f4       	brne	.+22     	; 0x140 <GPIO_voidConfigureBinInputOrOutput+0x98>
 12a:	24 b3       	in	r18, 0x14	; 20
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	02 c0       	rjmp	.+4      	; 0x136 <GPIO_voidConfigureBinInputOrOutput+0x8e>
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	6a 95       	dec	r22
 138:	e2 f7       	brpl	.-8      	; 0x132 <GPIO_voidConfigureBinInputOrOutput+0x8a>
 13a:	82 2b       	or	r24, r18
 13c:	84 bb       	out	0x14, r24	; 20
 13e:	08 95       	ret
 140:	41 11       	cpse	r20, r1
 142:	26 c0       	rjmp	.+76     	; 0x190 <GPIO_voidConfigureBinInputOrOutput+0xe8>
 144:	24 b3       	in	r18, 0x14	; 20
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	02 c0       	rjmp	.+4      	; 0x150 <GPIO_voidConfigureBinInputOrOutput+0xa8>
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	6a 95       	dec	r22
 152:	e2 f7       	brpl	.-8      	; 0x14c <GPIO_voidConfigureBinInputOrOutput+0xa4>
 154:	80 95       	com	r24
 156:	82 23       	and	r24, r18
 158:	84 bb       	out	0x14, r24	; 20
 15a:	08 95       	ret
 15c:	41 30       	cpi	r20, 0x01	; 1
 15e:	59 f4       	brne	.+22     	; 0x176 <GPIO_voidConfigureBinInputOrOutput+0xce>
 160:	21 b3       	in	r18, 0x11	; 17
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	02 c0       	rjmp	.+4      	; 0x16c <GPIO_voidConfigureBinInputOrOutput+0xc4>
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	6a 95       	dec	r22
 16e:	e2 f7       	brpl	.-8      	; 0x168 <GPIO_voidConfigureBinInputOrOutput+0xc0>
 170:	82 2b       	or	r24, r18
 172:	81 bb       	out	0x11, r24	; 17
 174:	08 95       	ret
 176:	41 11       	cpse	r20, r1
 178:	0b c0       	rjmp	.+22     	; 0x190 <GPIO_voidConfigureBinInputOrOutput+0xe8>
 17a:	21 b3       	in	r18, 0x11	; 17
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	02 c0       	rjmp	.+4      	; 0x186 <GPIO_voidConfigureBinInputOrOutput+0xde>
 182:	88 0f       	add	r24, r24
 184:	99 1f       	adc	r25, r25
 186:	6a 95       	dec	r22
 188:	e2 f7       	brpl	.-8      	; 0x182 <GPIO_voidConfigureBinInputOrOutput+0xda>
 18a:	80 95       	com	r24
 18c:	82 23       	and	r24, r18
 18e:	81 bb       	out	0x11, r24	; 17
 190:	08 95       	ret

00000192 <GPIO_voidReadBin>:
 192:	81 30       	cpi	r24, 0x01	; 1
 194:	79 f0       	breq	.+30     	; 0x1b4 <GPIO_voidReadBin+0x22>
 196:	28 f0       	brcs	.+10     	; 0x1a2 <GPIO_voidReadBin+0x10>
 198:	82 30       	cpi	r24, 0x02	; 2
 19a:	a9 f0       	breq	.+42     	; 0x1c6 <GPIO_voidReadBin+0x34>
 19c:	83 30       	cpi	r24, 0x03	; 3
 19e:	e1 f0       	breq	.+56     	; 0x1d8 <GPIO_voidReadBin+0x46>
 1a0:	24 c0       	rjmp	.+72     	; 0x1ea <GPIO_voidReadBin+0x58>
 1a2:	89 b3       	in	r24, 0x19	; 25
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <GPIO_voidReadBin+0x1a>
 1a8:	95 95       	asr	r25
 1aa:	87 95       	ror	r24
 1ac:	6a 95       	dec	r22
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <GPIO_voidReadBin+0x16>
 1b0:	81 70       	andi	r24, 0x01	; 1
 1b2:	08 95       	ret
 1b4:	86 b3       	in	r24, 0x16	; 22
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <GPIO_voidReadBin+0x2c>
 1ba:	95 95       	asr	r25
 1bc:	87 95       	ror	r24
 1be:	6a 95       	dec	r22
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <GPIO_voidReadBin+0x28>
 1c2:	81 70       	andi	r24, 0x01	; 1
 1c4:	08 95       	ret
 1c6:	83 b3       	in	r24, 0x13	; 19
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <GPIO_voidReadBin+0x3e>
 1cc:	95 95       	asr	r25
 1ce:	87 95       	ror	r24
 1d0:	6a 95       	dec	r22
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <GPIO_voidReadBin+0x3a>
 1d4:	81 70       	andi	r24, 0x01	; 1
 1d6:	08 95       	ret
 1d8:	80 b3       	in	r24, 0x10	; 16
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <GPIO_voidReadBin+0x50>
 1de:	95 95       	asr	r25
 1e0:	87 95       	ror	r24
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <GPIO_voidReadBin+0x4c>
 1e6:	81 70       	andi	r24, 0x01	; 1
 1e8:	08 95       	ret
 1ea:	8f ef       	ldi	r24, 0xFF	; 255
 1ec:	08 95       	ret

000001ee <GPIO_voidTGLBin>:
 1ee:	81 30       	cpi	r24, 0x01	; 1
 1f0:	89 f0       	breq	.+34     	; 0x214 <GPIO_voidTGLBin+0x26>
 1f2:	28 f0       	brcs	.+10     	; 0x1fe <GPIO_voidTGLBin+0x10>
 1f4:	82 30       	cpi	r24, 0x02	; 2
 1f6:	c9 f0       	breq	.+50     	; 0x22a <GPIO_voidTGLBin+0x3c>
 1f8:	83 30       	cpi	r24, 0x03	; 3
 1fa:	11 f1       	breq	.+68     	; 0x240 <GPIO_voidTGLBin+0x52>
 1fc:	08 95       	ret
 1fe:	2b b3       	in	r18, 0x1b	; 27
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	02 c0       	rjmp	.+4      	; 0x20a <GPIO_voidTGLBin+0x1c>
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	6a 95       	dec	r22
 20c:	e2 f7       	brpl	.-8      	; 0x206 <GPIO_voidTGLBin+0x18>
 20e:	82 27       	eor	r24, r18
 210:	8b bb       	out	0x1b, r24	; 27
 212:	08 95       	ret
 214:	28 b3       	in	r18, 0x18	; 24
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 c0       	rjmp	.+4      	; 0x220 <GPIO_voidTGLBin+0x32>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	6a 95       	dec	r22
 222:	e2 f7       	brpl	.-8      	; 0x21c <GPIO_voidTGLBin+0x2e>
 224:	82 27       	eor	r24, r18
 226:	88 bb       	out	0x18, r24	; 24
 228:	08 95       	ret
 22a:	25 b3       	in	r18, 0x15	; 21
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	02 c0       	rjmp	.+4      	; 0x236 <GPIO_voidTGLBin+0x48>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	6a 95       	dec	r22
 238:	e2 f7       	brpl	.-8      	; 0x232 <GPIO_voidTGLBin+0x44>
 23a:	82 27       	eor	r24, r18
 23c:	85 bb       	out	0x15, r24	; 21
 23e:	08 95       	ret
 240:	22 b3       	in	r18, 0x12	; 18
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	02 c0       	rjmp	.+4      	; 0x24c <GPIO_voidTGLBin+0x5e>
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	6a 95       	dec	r22
 24e:	e2 f7       	brpl	.-8      	; 0x248 <GPIO_voidTGLBin+0x5a>
 250:	82 27       	eor	r24, r18
 252:	82 bb       	out	0x12, r24	; 18
 254:	08 95       	ret

00000256 <LCD_Send_CMD>:
 256:	98 b3       	in	r25, 0x18	; 24
 258:	9d 7f       	andi	r25, 0xFD	; 253
 25a:	98 bb       	out	0x18, r25	; 24
 25c:	98 b3       	in	r25, 0x18	; 24
 25e:	9b 7f       	andi	r25, 0xFB	; 251
 260:	98 bb       	out	0x18, r25	; 24
 262:	8b bb       	out	0x1b, r24	; 27
 264:	88 b3       	in	r24, 0x18	; 24
 266:	88 60       	ori	r24, 0x08	; 8
 268:	88 bb       	out	0x18, r24	; 24
 26a:	89 ef       	ldi	r24, 0xF9	; 249
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <LCD_Send_CMD+0x18>
 272:	00 c0       	rjmp	.+0      	; 0x274 <LCD_Send_CMD+0x1e>
 274:	00 00       	nop
 276:	88 b3       	in	r24, 0x18	; 24
 278:	87 7f       	andi	r24, 0xF7	; 247
 27a:	88 bb       	out	0x18, r24	; 24
 27c:	87 e8       	ldi	r24, 0x87	; 135
 27e:	93 e1       	ldi	r25, 0x13	; 19
 280:	01 97       	sbiw	r24, 0x01	; 1
 282:	f1 f7       	brne	.-4      	; 0x280 <LCD_Send_CMD+0x2a>
 284:	00 c0       	rjmp	.+0      	; 0x286 <LCD_Send_CMD+0x30>
 286:	00 00       	nop
 288:	08 95       	ret

0000028a <LCD_Send_Data_4BIT>:
 28a:	98 b3       	in	r25, 0x18	; 24
 28c:	92 60       	ori	r25, 0x02	; 2
 28e:	98 bb       	out	0x18, r25	; 24
 290:	98 b3       	in	r25, 0x18	; 24
 292:	9b 7f       	andi	r25, 0xFB	; 251
 294:	98 bb       	out	0x18, r25	; 24
 296:	9b b3       	in	r25, 0x1b	; 27
 298:	9f 70       	andi	r25, 0x0F	; 15
 29a:	28 2f       	mov	r18, r24
 29c:	20 7f       	andi	r18, 0xF0	; 240
 29e:	92 2b       	or	r25, r18
 2a0:	9b bb       	out	0x1b, r25	; 27
 2a2:	98 b3       	in	r25, 0x18	; 24
 2a4:	98 60       	ori	r25, 0x08	; 8
 2a6:	98 bb       	out	0x18, r25	; 24
 2a8:	e9 ef       	ldi	r30, 0xF9	; 249
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	31 97       	sbiw	r30, 0x01	; 1
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <LCD_Send_Data_4BIT+0x22>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <LCD_Send_Data_4BIT+0x28>
 2b2:	00 00       	nop
 2b4:	98 b3       	in	r25, 0x18	; 24
 2b6:	97 7f       	andi	r25, 0xF7	; 247
 2b8:	98 bb       	out	0x18, r25	; 24
 2ba:	e9 ef       	ldi	r30, 0xF9	; 249
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	31 97       	sbiw	r30, 0x01	; 1
 2c0:	f1 f7       	brne	.-4      	; 0x2be <LCD_Send_Data_4BIT+0x34>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <LCD_Send_Data_4BIT+0x3a>
 2c4:	00 00       	nop
 2c6:	2b b3       	in	r18, 0x1b	; 27
 2c8:	f0 e1       	ldi	r31, 0x10	; 16
 2ca:	8f 9f       	mul	r24, r31
 2cc:	c0 01       	movw	r24, r0
 2ce:	11 24       	eor	r1, r1
 2d0:	92 2f       	mov	r25, r18
 2d2:	9f 70       	andi	r25, 0x0F	; 15
 2d4:	89 2b       	or	r24, r25
 2d6:	8b bb       	out	0x1b, r24	; 27
 2d8:	88 b3       	in	r24, 0x18	; 24
 2da:	88 60       	ori	r24, 0x08	; 8
 2dc:	88 bb       	out	0x18, r24	; 24
 2de:	89 ef       	ldi	r24, 0xF9	; 249
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	01 97       	sbiw	r24, 0x01	; 1
 2e4:	f1 f7       	brne	.-4      	; 0x2e2 <LCD_Send_Data_4BIT+0x58>
 2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <LCD_Send_Data_4BIT+0x5e>
 2e8:	00 00       	nop
 2ea:	88 b3       	in	r24, 0x18	; 24
 2ec:	87 7f       	andi	r24, 0xF7	; 247
 2ee:	88 bb       	out	0x18, r24	; 24
 2f0:	e7 e8       	ldi	r30, 0x87	; 135
 2f2:	f3 e1       	ldi	r31, 0x13	; 19
 2f4:	31 97       	sbiw	r30, 0x01	; 1
 2f6:	f1 f7       	brne	.-4      	; 0x2f4 <LCD_Send_Data_4BIT+0x6a>
 2f8:	00 c0       	rjmp	.+0      	; 0x2fa <LCD_Send_Data_4BIT+0x70>
 2fa:	00 00       	nop
 2fc:	08 95       	ret

000002fe <LCD_Send_CMD_4BIT>:
 2fe:	98 b3       	in	r25, 0x18	; 24
 300:	9d 7f       	andi	r25, 0xFD	; 253
 302:	98 bb       	out	0x18, r25	; 24
 304:	98 b3       	in	r25, 0x18	; 24
 306:	9b 7f       	andi	r25, 0xFB	; 251
 308:	98 bb       	out	0x18, r25	; 24
 30a:	9b b3       	in	r25, 0x1b	; 27
 30c:	9f 70       	andi	r25, 0x0F	; 15
 30e:	28 2f       	mov	r18, r24
 310:	20 7f       	andi	r18, 0xF0	; 240
 312:	92 2b       	or	r25, r18
 314:	9b bb       	out	0x1b, r25	; 27
 316:	98 b3       	in	r25, 0x18	; 24
 318:	98 60       	ori	r25, 0x08	; 8
 31a:	98 bb       	out	0x18, r25	; 24
 31c:	e9 ef       	ldi	r30, 0xF9	; 249
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	31 97       	sbiw	r30, 0x01	; 1
 322:	f1 f7       	brne	.-4      	; 0x320 <LCD_Send_CMD_4BIT+0x22>
 324:	00 c0       	rjmp	.+0      	; 0x326 <LCD_Send_CMD_4BIT+0x28>
 326:	00 00       	nop
 328:	98 b3       	in	r25, 0x18	; 24
 32a:	97 7f       	andi	r25, 0xF7	; 247
 32c:	98 bb       	out	0x18, r25	; 24
 32e:	e9 ef       	ldi	r30, 0xF9	; 249
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	31 97       	sbiw	r30, 0x01	; 1
 334:	f1 f7       	brne	.-4      	; 0x332 <LCD_Send_CMD_4BIT+0x34>
 336:	00 c0       	rjmp	.+0      	; 0x338 <LCD_Send_CMD_4BIT+0x3a>
 338:	00 00       	nop
 33a:	2b b3       	in	r18, 0x1b	; 27
 33c:	f0 e1       	ldi	r31, 0x10	; 16
 33e:	8f 9f       	mul	r24, r31
 340:	c0 01       	movw	r24, r0
 342:	11 24       	eor	r1, r1
 344:	92 2f       	mov	r25, r18
 346:	9f 70       	andi	r25, 0x0F	; 15
 348:	89 2b       	or	r24, r25
 34a:	8b bb       	out	0x1b, r24	; 27
 34c:	88 b3       	in	r24, 0x18	; 24
 34e:	88 60       	ori	r24, 0x08	; 8
 350:	88 bb       	out	0x18, r24	; 24
 352:	89 ef       	ldi	r24, 0xF9	; 249
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	01 97       	sbiw	r24, 0x01	; 1
 358:	f1 f7       	brne	.-4      	; 0x356 <LCD_Send_CMD_4BIT+0x58>
 35a:	00 c0       	rjmp	.+0      	; 0x35c <LCD_Send_CMD_4BIT+0x5e>
 35c:	00 00       	nop
 35e:	88 b3       	in	r24, 0x18	; 24
 360:	87 7f       	andi	r24, 0xF7	; 247
 362:	88 bb       	out	0x18, r24	; 24
 364:	e7 e8       	ldi	r30, 0x87	; 135
 366:	f3 e1       	ldi	r31, 0x13	; 19
 368:	31 97       	sbiw	r30, 0x01	; 1
 36a:	f1 f7       	brne	.-4      	; 0x368 <LCD_Send_CMD_4BIT+0x6a>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <LCD_Send_CMD_4BIT+0x70>
 36e:	00 00       	nop
 370:	08 95       	ret

00000372 <LCD_vInit_4Bit>:
 372:	8a b3       	in	r24, 0x1a	; 26
 374:	80 6f       	ori	r24, 0xF0	; 240
 376:	8a bb       	out	0x1a, r24	; 26
 378:	87 b3       	in	r24, 0x17	; 23
 37a:	84 60       	ori	r24, 0x04	; 4
 37c:	87 bb       	out	0x17, r24	; 23
 37e:	87 b3       	in	r24, 0x17	; 23
 380:	82 60       	ori	r24, 0x02	; 2
 382:	87 bb       	out	0x17, r24	; 23
 384:	87 b3       	in	r24, 0x17	; 23
 386:	88 60       	ori	r24, 0x08	; 8
 388:	87 bb       	out	0x17, r24	; 23
 38a:	85 ea       	ldi	r24, 0xA5	; 165
 38c:	9e e0       	ldi	r25, 0x0E	; 14
 38e:	01 97       	sbiw	r24, 0x01	; 1
 390:	f1 f7       	brne	.-4      	; 0x38e <LCD_vInit_4Bit+0x1c>
 392:	00 c0       	rjmp	.+0      	; 0x394 <LCD_vInit_4Bit+0x22>
 394:	00 00       	nop
 396:	82 e0       	ldi	r24, 0x02	; 2
 398:	0e 94 7f 01 	call	0x2fe	; 0x2fe <LCD_Send_CMD_4BIT>
 39c:	88 e2       	ldi	r24, 0x28	; 40
 39e:	0e 94 7f 01 	call	0x2fe	; 0x2fe <LCD_Send_CMD_4BIT>
 3a2:	8c e0       	ldi	r24, 0x0C	; 12
 3a4:	0e 94 7f 01 	call	0x2fe	; 0x2fe <LCD_Send_CMD_4BIT>
 3a8:	86 e0       	ldi	r24, 0x06	; 6
 3aa:	0e 94 7f 01 	call	0x2fe	; 0x2fe <LCD_Send_CMD_4BIT>
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	0e 94 7f 01 	call	0x2fe	; 0x2fe <LCD_Send_CMD_4BIT>
 3b4:	08 95       	ret

000003b6 <__vector_1>:
/* Define a variable i and initialize it to 0 */
u8 i = 0;


/* Interrupt Service Routine for external interrupt INT0 */
ISR(INT0_vect){
 3b6:	1f 92       	push	r1
 3b8:	0f 92       	push	r0
 3ba:	0f b6       	in	r0, 0x3f	; 63
 3bc:	0f 92       	push	r0
 3be:	11 24       	eor	r1, r1
 3c0:	2f 93       	push	r18
 3c2:	3f 93       	push	r19
 3c4:	4f 93       	push	r20
 3c6:	5f 93       	push	r21
 3c8:	6f 93       	push	r22
 3ca:	7f 93       	push	r23
 3cc:	8f 93       	push	r24
 3ce:	9f 93       	push	r25
 3d0:	af 93       	push	r26
 3d2:	bf 93       	push	r27
 3d4:	ef 93       	push	r30
 3d6:	ff 93       	push	r31
	/* Increment the value of i, wrapping around to 0 if it reaches 99 */
	if(i == 99)
 3d8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 3dc:	83 36       	cpi	r24, 0x63	; 99
 3de:	19 f4       	brne	.+6      	; 0x3e6 <__vector_1+0x30>
		i = 0;
 3e0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 3e4:	03 c0       	rjmp	.+6      	; 0x3ec <__vector_1+0x36>
	else
		i++;
 3e6:	8f 5f       	subi	r24, 0xFF	; 255
 3e8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	GPIO_voidTGLBin(C,led0C);
 3ec:	62 e0       	ldi	r22, 0x02	; 2
 3ee:	82 e0       	ldi	r24, 0x02	; 2
 3f0:	0e 94 f7 00 	call	0x1ee	; 0x1ee <GPIO_voidTGLBin>
	while(GPIO_voidReadBin(D, sw2D));
 3f4:	62 e0       	ldi	r22, 0x02	; 2
 3f6:	83 e0       	ldi	r24, 0x03	; 3
 3f8:	0e 94 c9 00 	call	0x192	; 0x192 <GPIO_voidReadBin>
 3fc:	81 11       	cpse	r24, r1
 3fe:	fa cf       	rjmp	.-12     	; 0x3f4 <__vector_1+0x3e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 400:	87 e8       	ldi	r24, 0x87	; 135
 402:	93 e1       	ldi	r25, 0x13	; 19
 404:	01 97       	sbiw	r24, 0x01	; 1
 406:	f1 f7       	brne	.-4      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 408:	00 c0       	rjmp	.+0      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 40a:	00 00       	nop
	_delay_ms(20);
}
 40c:	ff 91       	pop	r31
 40e:	ef 91       	pop	r30
 410:	bf 91       	pop	r27
 412:	af 91       	pop	r26
 414:	9f 91       	pop	r25
 416:	8f 91       	pop	r24
 418:	7f 91       	pop	r23
 41a:	6f 91       	pop	r22
 41c:	5f 91       	pop	r21
 41e:	4f 91       	pop	r20
 420:	3f 91       	pop	r19
 422:	2f 91       	pop	r18
 424:	0f 90       	pop	r0
 426:	0f be       	out	0x3f, r0	; 63
 428:	0f 90       	pop	r0
 42a:	1f 90       	pop	r1
 42c:	18 95       	reti

0000042e <main>:


int main(void)
{
    /* Configure GPIO pins A and D as inputs */
    GPIO_voidConfigureBinInputOrOutput(D, sw2D, input);
 42e:	40 e0       	ldi	r20, 0x00	; 0
 430:	62 e0       	ldi	r22, 0x02	; 2
 432:	83 e0       	ldi	r24, 0x03	; 3
 434:	0e 94 54 00 	call	0xa8	; 0xa8 <GPIO_voidConfigureBinInputOrOutput>
    GPIO_voidConfigureBinInputOrOutput(C, led0C, output);
 438:	41 e0       	ldi	r20, 0x01	; 1
 43a:	62 e0       	ldi	r22, 0x02	; 2
 43c:	82 e0       	ldi	r24, 0x02	; 2
 43e:	0e 94 54 00 	call	0xa8	; 0xa8 <GPIO_voidConfigureBinInputOrOutput>

    /* Initialize the LCD module in 4-bit mode */
    LCD_vInit_4Bit();
 442:	0e 94 b9 01 	call	0x372	; 0x372 <LCD_vInit_4Bit>
	
    /* Initialize external interrupts INT0 and INT1 */
    EXTI_vInt0_Init();
 446:	0e 94 3e 00 	call	0x7c	; 0x7c <EXTI_vInt0_Init>
    EXTI_vInt1_Init();
 44a:	0e 94 49 00 	call	0x92	; 0x92 <EXTI_vInt1_Init>

    /* Replace with your application code */
    /* Display the initial value of i on the LCD */
    LCD_Send_Data_4BIT(i / 10 + 48); /* char start 0 at 48 ASCII */
 44e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 452:	cd ec       	ldi	r28, 0xCD	; 205
 454:	8c 9f       	mul	r24, r28
 456:	81 2d       	mov	r24, r1
 458:	11 24       	eor	r1, r1
 45a:	86 95       	lsr	r24
 45c:	86 95       	lsr	r24
 45e:	86 95       	lsr	r24
 460:	80 5d       	subi	r24, 0xD0	; 208
 462:	0e 94 45 01 	call	0x28a	; 0x28a <LCD_Send_Data_4BIT>
    LCD_Send_Data_4BIT(i % 10 + 48); /* char start 0 at 48 ASCII */
 466:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 46a:	9c 9f       	mul	r25, r28
 46c:	81 2d       	mov	r24, r1
 46e:	11 24       	eor	r1, r1
 470:	86 95       	lsr	r24
 472:	86 95       	lsr	r24
 474:	86 95       	lsr	r24
 476:	88 0f       	add	r24, r24
 478:	28 2f       	mov	r18, r24
 47a:	22 0f       	add	r18, r18
 47c:	22 0f       	add	r18, r18
 47e:	82 0f       	add	r24, r18
 480:	98 1b       	sub	r25, r24
 482:	89 2f       	mov	r24, r25
 484:	80 5d       	subi	r24, 0xD0	; 208
 486:	0e 94 45 01 	call	0x28a	; 0x28a <LCD_Send_Data_4BIT>

    while (1) 
    {
        /* Clear the LCD display and move the cursor to the home position */
        LCD_Send_CMD(0x01);  /* Clear display */
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_Send_CMD>
 490:	83 ef       	ldi	r24, 0xF3	; 243
 492:	91 e0       	ldi	r25, 0x01	; 1
 494:	01 97       	sbiw	r24, 0x01	; 1
 496:	f1 f7       	brne	.-4      	; 0x494 <main+0x66>
 498:	00 c0       	rjmp	.+0      	; 0x49a <main+0x6c>
 49a:	00 00       	nop
        _delay_ms(2);        /* Wait for the display to clear */
        LCD_Send_CMD(0x02);  /* Move cursor to home position */
 49c:	82 e0       	ldi	r24, 0x02	; 2
 49e:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_Send_CMD>
 4a2:	83 ef       	ldi	r24, 0xF3	; 243
 4a4:	91 e0       	ldi	r25, 0x01	; 1
 4a6:	01 97       	sbiw	r24, 0x01	; 1
 4a8:	f1 f7       	brne	.-4      	; 0x4a6 <main+0x78>
 4aa:	00 c0       	rjmp	.+0      	; 0x4ac <main+0x7e>
 4ac:	00 00       	nop
        _delay_ms(2);        /* Wait for the cursor to move */

        /* Display the updated value of i on the LCD */
        LCD_Send_Data_4BIT(i / 10 + 48); /* char start 0 at 48 ASCII */
 4ae:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 4b2:	cd ec       	ldi	r28, 0xCD	; 205
 4b4:	8c 9f       	mul	r24, r28
 4b6:	81 2d       	mov	r24, r1
 4b8:	11 24       	eor	r1, r1
 4ba:	86 95       	lsr	r24
 4bc:	86 95       	lsr	r24
 4be:	86 95       	lsr	r24
 4c0:	80 5d       	subi	r24, 0xD0	; 208
 4c2:	0e 94 45 01 	call	0x28a	; 0x28a <LCD_Send_Data_4BIT>
        LCD_Send_Data_4BIT(i % 10 + 48); /* char start 0 at 48 ASCII */
 4c6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 4ca:	8c 9f       	mul	r24, r28
 4cc:	c1 2d       	mov	r28, r1
 4ce:	11 24       	eor	r1, r1
 4d0:	c6 95       	lsr	r28
 4d2:	c6 95       	lsr	r28
 4d4:	c6 95       	lsr	r28
 4d6:	cc 0f       	add	r28, r28
 4d8:	9c 2f       	mov	r25, r28
 4da:	99 0f       	add	r25, r25
 4dc:	99 0f       	add	r25, r25
 4de:	c9 0f       	add	r28, r25
 4e0:	8c 1b       	sub	r24, r28
 4e2:	80 5d       	subi	r24, 0xD0	; 208
 4e4:	0e 94 45 01 	call	0x28a	; 0x28a <LCD_Send_Data_4BIT>
 4e8:	d0 cf       	rjmp	.-96     	; 0x48a <main+0x5c>

000004ea <_exit>:
 4ea:	f8 94       	cli

000004ec <__stop_program>:
 4ec:	ff cf       	rjmp	.-2      	; 0x4ec <__stop_program>
